"use strict";(self.webpackChunkyangshuntay_com=self.webpackChunkyangshuntay_com||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"front-end-career-questions","metadata":{"permalink":"/blog/front-end-career-questions","source":"@site/blog/2021-08-28-front-end-career-questions.md","title":"Front End Career Questions","description":"Recently a junior front end engineer at a startup in Singapore reached out to me to ask me how front end development as a career.","date":"2021-08-28T00:00:00.000Z","formattedDate":"August 28, 2021","tags":[{"label":"front end","permalink":"/blog/tags/front-end"},{"label":"career","permalink":"/blog/tags/career"}],"readingTime":3.59,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","title":"Engineering Lead at Facebook","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"Front End Career Questions","slug":"front-end-career-questions","author":"Yangshun Tay","author_title":"Engineering Lead at Facebook","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["front end","career"],"hide_table_of_contents":true},"nextItem":{"title":"Facebook Career Q&A","permalink":"/blog/facebook-career-questions-and-answers"}},"content":"Recently a junior front end engineer at a startup in Singapore reached out to me to ask me how front end development as a career.\\n\\n\x3c!--truncate--\x3e\\n\\n### My manager told me that currently it\'s a bit hard to define requirements & expectations for higher tier / higher Individual Contributor (IC) level for FE engineers in the organization. Since you are working at Facebook, I am wondering what are some requirements & expectations for higher IC level there for FE engineers (maybe around IC4, IC5 and above if that\'s kinda the level you use there)?\\n\\nFor smaller companies that might be true, but it\'s still possible if you don\'t limit yourself to front end work. Going up the levels is all about scope and complexity. IC3s (Junior Engineer) work on tasks, IC4s (Software Engineer) work on features, IC5s (Senior Software Engineer) work on projects, IC6s (Staff Software Engineer) work on huge projects spanning across teams, IC7s (Senior Staff Software Engineer) work on projects spanning across the org, IC8+s (Principal Software Engineer) work on projects spanning across the company or even influencing the industry. If you\'re able to show that you can handle scope of that magnitude, there shouldn\'t be a reason not to be compensated at that level. That said, the rough guide I proposed here is for a company the size of Facebook where we have 10s of thousands of Engineers. Doing work that impacts an entire company of 10 people likely won\'t be IC8 level work. For reference, React core team is mostly made up of IC5s/IC6s and one IC7. Flow has a number of IC5s and IC6s as it\'s technically complex and affects how the entire company writes JavaScript. GraphQL has many senior engineers and the creator of GraphQL is currently a director (IC8 equivalent).\\n\\n### Are you still doing a lot of FE-related development work now? Be it in the company or personally? If yes, I am just curious what are the things you often do, and what do you like in particular about FE development?\\n\\nI\'m still doing a lot of FE development for work. Less in a personal capacity ever since I stopped working on Docusaurus as a side project. You can check out my GitHub to see what stuff I\'ve done. At work I\'m in-charge of oculus.com and built the infra for it. I built a design system of React components for the content developers to develop the marketing pages.\\n\\nI really like all aspects of FE development, maybe except optimizing performance. At FB we build a lot of FE-related tooling (e.g. Jest, GraphQL, Flow) and libraries (our internal CSS-in-JS solution, Docusaurus, React, Flux, etc) which is personally very exciting to me. Even within front end development, there are various layers - very user-facing stuff (HTML/CSS/visual related code) and back end (JavaScript stuff, network layer, storage), tooling (ESLint, Babel, TypeScript, webpack). I call myself a full front end stack developer as I\'m decent across the entire front end stack. I\'m especially excited about tooling work as the problems there are interesting and challenging. Typically only large companies face such problems because they only occur at scale, hence I really like being at FB because FB is one of such companies.\\n\\n### Personally, do you have any tips on how best to grow as an FE engineer? Are there any particular areas that you\'d recommend?\\n\\nLearn your fundamentals well. There are many UI and CSS libraries out there, but a good FE developer still needs to know how to build a website without them. Peek beneath the abstraction layers and understand the problems these libraries are trying to solve, do not use them blindly. Keep building stuff - try to build a simple version of the libraries you frequently use, build interesting user interfaces and products, etc.\\n\\n### What do you think about developing breadth-wise vs depth-wise? For example, do you think it\'s important for a software engineer to know more about other fields besides the end he/she is currently working at? In particular, what do you think about an FE engineer that knows BE (i.e. a full-stack developer), or an FE engineer that knows mobile development (with the advent of React Native or Flutter)?\\n\\nI somewhat answered this in another [blog post](/blog/are-front-end-development-skills-enough-for-a-career). Lemme know if your question isn\'t answered after reading it."},{"id":"facebook-career-questions-and-answers","metadata":{"permalink":"/blog/facebook-career-questions-and-answers","source":"@site/blog/2021-08-19-facebook-career-questions-and-answers.md","title":"Facebook Career Q&A","description":"A number of students from the Project Intern group have been asking me questions related to Facebook internships, working at Facebook, and my personal journey. I decided to write down my answers in the form of a blog post so they can be shared more broadly and I can point people to this blog post in future whenever I get asked similar questions.","date":"2021-08-19T00:00:00.000Z","formattedDate":"August 19, 2021","tags":[{"label":"career","permalink":"/blog/tags/career"},{"label":"facebook","permalink":"/blog/tags/facebook"},{"label":"meta","permalink":"/blog/tags/meta"}],"readingTime":37.4,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","title":"Engineering Lead at Facebook","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"Facebook Career Q&A","slug":"facebook-career-questions-and-answers","author":"Yangshun Tay","author_title":"Engineering Lead at Facebook","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["career","facebook","meta"],"hide_table_of_contents":true},"prevItem":{"title":"Front End Career Questions","permalink":"/blog/front-end-career-questions"},"nextItem":{"title":"Importance of Communicating Effectively as Engineers","permalink":"/blog/importance-of-communicating-effectively-as-engineers"}},"content":"A number of students from the Project Intern group have been asking me questions related to Facebook internships, working at Facebook, and my personal journey. I decided to write down my answers in the form of a blog post so they can be shared more broadly and I can point people to this blog post in future whenever I get asked similar questions.\\n\\n\x3c!--truncate--\x3e\\n\\n**_I am not a recruiter and I might have answered some of the recruiting or internship-related questions wrongly, so take them with a grain of salt. Opinions expressed are my own and do not represent the views of my employer._**\\n\\n## Glossary\\n\\n- APAC - Asia Pacific Region\\n- CVWO - Computing for Voluntary Welfare Organizations\\n- DSA - Data Structures and Algorithms\\n- EE - Enterprise Engineer/ing\\n- FRL - Facebook Reality Labs\\n- FTE - Full-time Employee\\n- IANACP - I am not a career portal\\n- IANAR - I am not a recruiter\\n- IANAL - I am not a lawyer\\n- IINW - If I\'m not wrong\\n- RA - Residential Assistant\\n- SWE - Software Engineer/ing\\n- TPM - Technical Program Manager\\n\\n## Caveats\\n\\n- These replies are tailored towards the Facebook interview process for interns and fresh grads. They may or may not apply to other smaller companies.\\n- Most of these answers apply across the board but there are exceptions for certain specialized, non-SWE roles.\\n\\n## Application/Referral\\n\\n### What\'s the application process like (for internships)?\\n\\nApply on https://www.facebook.com/careers. Recruiters will reach out to you if there\'s interest and chat with you over the phone. If it goes well, there will be two rounds of coding interviews.\\n\\n### What are some qualities/experiences that Facebook looks for in a resume?\\n\\nIANAR and I don\'t filter any resumes, so I don\'t exactly know. But from experience, write stuff that makes you stand out from the rest. Have good grades? Add it in. Scholarships/awards, write them down. Have extensive internship experience? Include them in an organized format. Built cool hacks/side projects? Add the GitHub links and demos. Won hackathons/competitions? Put them in. One thing is for sure - few companies would want to hire candidates who only have academic credentials and no industry experience.\\n\\n### Does GPA affect a lot on the resume screening?\\n\\nGPA/CAP/grades is just one of the signals that can be extracted from the resume. As mentioned above, there are many other qualities and achievements a candidate can possess. Personally if I had my own company, I would rather hire a candidate with a high second upper and fantastic open source portfolio with multiple internship experiences at big companies over a student with CAP 5.00 but has nothing else to show for. Not that one candidate is stronger than the other, but the former would probably be a safer choice.\\n\\n### In general, how\'s the barrier of entry for big tech companies like FB in terms of grades, would a second lower (3.5-3.9) even get pass the resume screening stage?\\n\\nGrades matter less the longer someone has left school. For students, because there\'s a lack of working experience, grades might play a larger part in the resume screening, but it\'s by no means the only thing that matters.\\n\\n### Is the resume screening done by AI / human recruiter? What is being looked out for on the resume? As someone who isn\'t strong academically, will I be able to compete purely based on experience on my resume?\\n\\nIANAR. Usually people suck at their studies because instead of studying they spent their time elsewhere. If it was spent on related stuff like hacking on side projects and internships, that probably makes up for the subpar academic grades. But if you suck at studies and spent your time clubbing instead, then I\'m sorry you probably won\'t get past the screening. Note that CS is such a hot course now that only the best students can get in these days. A fair amount of students have both good grades AND non-academic achievements. Competition is tough!\\n\\n### Are there any languages/frameworks that are helpful to know before applying?\\n\\nFor Software Engineering (SWE) positions, Facebook doesn\'t require you to have experience in specific languages/frameworks before joining. Likewise, there aren\'t any of such restrictions for SWE interviews. You can do your interviews in your programming language of choice. One exception to this is if you\'re applying for a Front End Engineer or Mobile Engineer position, then you will be asked domain-specific questions and by extension, required to use JavaScript/Java/Kotlin/Objective-C/Swift to answer the questions.\\n\\n### Are intern applications (and hence, the spots) based on first-come-first-served?\\n\\nIANAR. But as with all jobs, there are definitely limited spots and once they\'re filled up there isn\'t a need to hire anymore. Applying in 2022 for the internship which application opens in September, is almost definitely too late. You can apply later (October) if you want more time to prepare, but there might be fewer slots left. Moral of the story - prepare early.\\n\\n### How\'s the referral process about/like?\\n\\nFacebook will send you a form (initiated by me) where you can fill up your name, email, upload your resume, and select the roles you would like to apply. From there on, from an applicant perspective it\'s not different from them applying themselves on the Facebook Careers Portal.\\n\\n### May I know until when your referral is valid? I was hoping to start my application a bit later so was hoping to reach out to you then for a referral. Is there any last date to \\"claim\\" this in any way?\\n\\nAs long as I remain employed at Facebook, I\'m happy to refer you if I feel that you stand a good chance passing the interviews. As mentioned earlier, if you apply when unprepared, you risk wasting the chance. Take too long and apply too late, then you risk the slots being all filled up. I don\'t know the last date to be referred but I recommend not later than end of September.\\n\\n### Any tips for a good resume to apply for FB?\\n\\nAnswered above. I don\'t think most students need to worry about the resume screening stage. Worry about the interviews. Use a neat and standard template and you should be fine.\\n\\n### If I build my projects must some of them be pushed to production before applying?\\n\\nBest if you can, but I\'m not sure if recruiters actually click on your project links. Maybe just don\'t include the link if it\'s not really usable?\\n\\n### Do you have any tips in applying for a fresh grad SWE role in facebook?\\n\\nMake sure you know your algorithms at the back of your hand. Fresh grad SWE role interviews also have a behavioral round, so be prepared to talk about your past experiences. There\'s a section in this handbook which covers those.\\n\\n### Apart from preparing for DSA questions, are there other areas you would recommend preparing for (either for the interviews / a better chance to get shortlisted for them)?\\n\\nIf you\'re going for a SWE intern/grad position, DSA is the most important. The bulk of the assessment is on DSA. Grind your LeetCode.\\n\\n## Would love to find out what the interviewers at Facebook usually look out for in candidates!\\n\\nDSA. DSA. DSA. Communication skills - You must be able to also communicate your thought process well throughout the interview.\\n\\n### Am I able to apply for both local and overseas (in the USA) roles for FB and be considered for both? Or would I only be considered for SG\'s openings since FB has an office here and I\'m already located in SG?\\n\\nIANAR. Typically you will only be interviewed for one location. Candidates based in Singapore are free to apply to non-Singapore positions and intern there.\\n\\n### What is the application process like for the Software Engineer role? Is it any different from the Enterprise and Front End Engineer role?\\n\\nFor SWE, I\'ve answered above. I\'m not sure about Enterprise Engineers, I suspect it wouldn\'t be too different. For Front End Engineers, the questions will be domain-specific, hence will require candidates to write HTML/CSS/JavaScript. Note that Facebook Singapore currently does not hire Front End Engineers and interns. If you\'re interested in a Front End Engineer internship/FTE position, you\'d have to look overseas.\\n\\n### Is there anything I can do/prepare to improve my chances of getting through the recruiter screen?\\n\\n1. Get a referral\\n1. Have a solid neat resume that showcases your abilities\\n\\n### How much does a referral help in landing a interview?\\n\\nReferrals tend to have a higher visibility than someone who applies on the Careers Portal directly, but that\'s about it.\\n\\n### Are there any related full time openings at FB, and if so how can I help you decide if I\'m a good candidate to refer?\\n\\nI look through your transcript and resume and look for stuff that suggests you\'d make a good employee. What things I look out for - excellent grades in the relevant modules, notable internships, interesting side projects, ICPC/IOI awards. Bonus: Open Source experience. I\'m a huge fan of Open Source and if you have built something really cool that\'s Open Source, I\'d refer you even if your grades are terrible.\\n\\n### Do I stand a good chance if I\'m from a Info Systems background but gotten good grades for programming modules? Currently taking some CS modules now too.\\n\\nThere are many IS folks who are good engineers. As long as you can demonstrate that you have mastery of programming and DSA, it shouldn\'t be an issue.\\n\\n### Would you know whether Facebook\'s hiring process has a preference for single-page resumes?\\n\\nAs an interviewer for FB senior-ish candidates, I have seen some horrendously long resumes. So I would think single-page is not a hard rule, more of a recommendation. If you are exceeding a single page, then you are likely including too many things. [My own resume](https://docs.google.com/document/d/13c8KsKSsP5biJT8N70aLULyq-I5ywuWrxRxr2faQTK4/) is a 2-column one with small-ish font which I used in my last job hunt in 2017. It has got me replies from recruiters. This was before I started working at Facebook, so the Facebook branding isn\'t the main reason.\\n\\n### I\'m an international student at SMU, does Facebook sponsor employment pass?\\n\\nIANAL. But we have had international students interning at Facebook before and are currently working at Facebook. Please check with the recruiter.\\n\\n### I\'m from SUTD and my schedule is pretty weird! I\'m graduating next year so should I apply for internship or a job?\\n\\nIf you have any spare summers left, you can and should go for an internship. IMO passing an internship interview is easier than a full-time interview, and likely leads to a better conversion package also if you have performed well during the internship.\\n\\n### Am I eligible to work overseas in US/London/Canada?\\n\\nIANAR. If you\'re Singaporean, you\'d have no problems working anywhere. If you\'re a foreign student, you could check with your seniors or just ask the recruiter when you get the chance.\\n\\n## Interviews\\n\\n### What\'s the interview process like?\\n\\nFor all roles, there should be an initial contact (e.g. phone call) with recruiters. For interns, it would be 2 rounds of online coding interviews where the focus is on DSA. For fresh graduates, it would be 2 rounds of online coding interviews and 1 behavioral round.\\n\\n### Based on your past experience, if a candidate does not get full marks for the online coding test, what are the chances of him or her getting a face to face interview? Just curious about the level of competition haha (This is because I\'m not that worried about whiteboard interviews but afraid that I may not even get a chance to go through it)\\n\\nI don\'t even think there\'s an online coding test for Facebook. Can\'t answer this.\\n\\n### Would FB US hire SG citizens considering that there\'s an FB SG office already?\\n\\nYes.\\n\\n### How I could improve my chances on landing an internship?\\n\\nStudy your DSA, grind LeetCode, do mock interviews with your peers to get used to talking out loud/communicating your thoughts while coding.\\n\\n### I wanna learn as much as possible from you about topics that might benefit me\\n\\nBenefit you in terms of what, and when? For passing the interviews, DSA and LeetCode. For the actual internship, that\'ll be a much longer answer which I shan\'t go into because that\'s a problem for later, if you pass the interviews.\\n\\n### I heard FB doesn\'t ask dynamic programming questions, correct me if I\'m wrong. Are there any topics I should be focusing more on?\\n\\nI can neither confirm nor deny this. General tip for coding interviews - focus on the most common data structures and algorithms. If a particular topic is really obscure, most likely you won\'t be asked on it because asking obscure stuff sometimes work against the interviewers as it\'d be harder for them to extract the right signals out of it. Look at the recommended practice questions in the handbook.\\n\\n### How many rounds of interviews are there? Does FB ask system design on the live interviews?\\n\\nFor internships, typically two coding. For fresh grads, typically two coding with one behavioral. No system design for internships and fresh grad interviews.\\n\\n### Would I be tested on specific tech stacks/real project experience, or is it purely algo based?\\n\\nIf you\'re applying for a SWE position, you won\'t be tested on a specific tech stacks/languages. The algorithm questions asked can be implemented in most programming languages (but you probably want to avoid using wenyan). If you\'re applying for a specialized position, then you might be asked to use domain-specific languages, which the recruiter should (will?) let you know ahead of time.\\n\\n## Internship\\n\\n### What are 3 qualities of a intern/new hire fellow FB engineers look out for?\\n\\nThis is a long answer and there are more than 3 qualities. But to get a conversion offer, in summary, interns have to show productivity and complete their assigned projects within the internship duration, product high quality code/work, demonstrate fast learning speed, actively communicate and collaborate, and show initiative and independence. Pretty much common sense if you ask me.\\n\\n### What are the different types of internship roles that are opening in FB (both here in SG and overseas)!\\n\\nIANACP. FB SG is quite limited in the sense we primarily only hiring SWE, EE interns. But I think I have seen TPM interns before. For overseas, almost every role is available.\\n\\n### Are there machine learning/data science internship roles at Facebook SG? How about in other countries?\\n\\nNot that I know of. Yes there should be for overseas, but then you\'ll be competing with a global pool of candidates.\\n\\n### What does the SWE role entail? Tech stack and what to expect?\\n\\nSoftware engineering of course. To answer seriously, it really depends on the team and their work. Most (all?) SWEs write code to solve problems. FB is big enough such that there are teams using almost every language out there.\\n\\nHere\'s an oversimplified overview:\\n\\n- Web Products - JavaScript/React/CSS/GraphQL/Relay/Hack (typed version of PHP)\\n- Mobile - Objective-C/Java/React Native/Proprietary frameworks\\n- Back End Services - Java/C++/Python\\n\\n### What is the internship format in Facebook like? For example, are the interns inserted into a team to work on issues or are they handed a project to work on throughout their internship?\\n\\nUnder normal circumstances, interns would be given one project that should take them the entire internship duration (10 weeks or so out of a 12-week internship) to complete. They will be assigned an Intern Manager that would serve as their mentor throughout the internship. The mentor is typically the one who came up with the project which is broken down into multiple milestones. Responsibilities of an intern manager include: onboarding the intern, giving the intern regular feedback on how they are doing, reviewing their code (typically together with other members of the team), evaluating whether the intern will get a return offer.\\n\\n### How\'s the mentorship like for FB interns? Do a mentor work together with intern on the same project? Are mentors randomly assigned within the company or do they volunteer for it?\\n\\nIntern managers may or may not work with the intern on the same project, but they definitely should have context over the intern\'s project and be able to review (or at the very least, find suitable people) the intern\'s work. Employees can sign up to be an intern manager for a specific internship season. It is not random. It would be a disastrous and unpleasant experience for both the intern and the intern manager if an employee got randomly assigned to be a manager.\\n\\n### What are some products that interns will get to work on in Facebook Singapore?\\n\\nIntern projects are typically self-contained and achievable within the internship duration. Some example of intern projects in FB SG - rebuilding Oculus Accounts Portal (https://secure.oculus.com) using a modern React design system, building a self-serve order return flow into Oculus Accounts Portal. Outside of FB SG - Building the settings page of facebook.com, building an internal debugging tool (something like Redux Devtools).\\n\\n### What kind of projects are interns usually given (like internal tooling or external products)\\n\\nAnswered above. Can be both, depends on the team. In Singapore, we primarily have product teams, so the projects are likely about adding product features.\\n\\n### Will there be any chances of being transferred to an overseas office after being accepted as an intern?\\n\\nYes I know of that happening to some ex-interns. However, that could be due to special COVID circumstances which might not necessarily apply in following years. You\'d have to check with the recruiter.\\n\\n### How many interns is FB looking to onboard next summer? Not sure if this can revealed but thought I\'ll ask nonetheless\\n\\nDon\'t know and even if I knew, I can\'t say. We had 4 interns in 2019 and around 10 interns in 2020. FB Singapore office is growing quite rapidly.\\n\\n### I\'m actually more interested in mobile dev, are there open internship roles for this in the SG office?\\n\\nThere are some teams in FB SG which work on mobile. Prior to starting internship at FB, interns will get to indicate their preference of tech stack and they will be matched to teams/projects which match their preferences.\\n\\n### Do you get to try out different parts of engineering as an intern / junior swe in facebook? e.g. if I were doing back end but I would like to try front end later down the road\\n\\nShort answer: for interns, not so much. For FTEs, much more autonomy.\\n\\nLonger answer: Interns are assigned a project which usually have a pre-defined tech stack. So the engineering work and stack that an intern will be doing is highly dependent on the assigned team and project. If the intern finishes the work early, it\'s possible to ask for more work from their manager and possibly try out other things. If the internship duration coincides with one of the internal hackathons, interns can participate in them and work on anything they want. For SWEs, there\'s a process called bootcamp after joining where employees find their own team to join. That gives them more flexibility in deciding what kind of work they want to do. Internal mobility is very good within FB as well. Personally I\'ve done both front end and back end at Facebook.\\n\\n## FB Culture\\n\\n### What\'s the difference between Software Engineer (SWE), Enterprise Engineer (EE), and Front End Engineer? This is because I heard from previous FB interns that they worked on the full stack.\\n\\n- SWE - Generalists, they are expected to be able to work on software-related problem given to them and should be able to work across the stack.\\n- EE - Taken from Facebook\'s Career Portal: \\"Facebook\'s Enterprise Products team is responsible for building integrated, scalable, and robust Enterprise Applications. As a member of Enterprise Products team, you will play a key role in re-imagining productivity by shipping transformative products that serve diverse aspects of the enterprise\\"\\n- Front End Engineers - SWE with front end specialization. The interview is in HTML/CSS/JavaScript and there\'s more focus on domain-specific questions. That doesn\'t mean Front End Engineers can only work on front end stuff, they can work on anything as long as it is what their team needs and they have alignment with their manager. In my experience, Front End Engineers at FB are highly skilled in front end but can do back end work too. Btw I\'m a Front End Engineer \ud83d\ude09\\n\\n### What are the opportunities that are currently available for the FB SG office? And perhaps what kind of people do you typically look for? (e.g., in terms of technical skills or perhaps other metrics)\\n\\nThere are two main orgs in FB SG - Commerce Engineering and Ads & Business Products. The Commerce Engineering teams in Singapore build e-commerce websites to sell Facebook\'s hardware devices (Quest, Portal) and also sees through the rest of the lifecycle of a purchase - support center, returns, warranties. I\'m in the Commerce Engineering org and my team manages https://www.oculus.com and https://portal.facebook.com. I don\'t know too much about the Ads side of things.\\n\\nRead an [article about my manager, Nishita Agarwal](https://www.facebook.com/careers/life/help-10-peopleor-billions/), which mentions empathy as a key trait.\\n\\nThere\'s also an [article about Software Engineering in APAC](https://www.facebook.com/careers/life/software-engineering-in-apac) on the Facebook Careers blog.\\n\\n### How is Facebook Singapore different from that at Hacker Way in San Francisco?\\n\\nFirst and foremost, check out the following (old but still relevant) [article](https://vulcanpost.com/648705/facebook-singapore-office-marina-one/).\\n\\nNit - Hacker Way is not in San Francisco, it is in Menlo Park. Perhaps you meant SF Bay Area. Anyway, FB SG and FB US differ is quite a lot of ways. There are too many to list but I\'ll list the most obvious ones.\\n\\n- Career Progression - FB US, being the HQ and where the company started, has the most number of teams and you have all levels of seniority of folks there. In FB SG, there are fewer teams and due to the size of the office now, there isn\'t a need for extremely senior engineers yet. So if you\'re talking about long term career progression, SG definitely loses out here. But don\'t need to think so far la, FB SG is still big enough for you to get to senior engineer position and earn enough to live comfortably for the rest of your life.\\n- Projects - Primarily product teams and hires primarily SWEs and EEs, while FB US has a good mix of teams, including infrastructure teams and hires across all roles. So if you\'re interested in working on infra stuff like our internal logging framework, GraphQL, our internal ORM, you\'d have to look at non-SG offices.\\n- Changing Teams - SG has fewer teams, so if you were looking to change teams but remain in Singapore, the choices are more limited.\\n- Company Culture - You don\'t get to attend the events held only at the HQ in-person, such as Zuck\'s Q&A or company town halls or the summer and holiday parties (but there are local versions of them).\\n- Food - Smaller selection of cafes. Food is still pretty darn good though. There\'s nothing to complain about free food.\\n- Office - Smaller office in SG, but still one of the coolest in SG. Menlo Park Headquarters is amazing, there\'s an arcade, board games room, a barber, ice cream shop, a gadgets vending machine, and more. It looks like Universal Studios at night. I\'ll just leave this [video](https://www.youtube.com/watch?v=cY3sMN3wohg) here.\\n- $$$ - FB pay is top tier in both US and SG. However in SG, you have to pay less tax and cheaper living expenses. In SG, I earn less but save more due to the large difference in taxes.\\n- Taxes - SG tax is crazy low compared to US. US taxes you on every damn thing, including the capital gains from your stocks and bank interest earned (WTF), but SG doesn\'t.\\n- Engineering Culture - Similar-ish because quite a number of engineers in FB SG moved here from FB US, including myself. But being a smaller office, we don\'t have extremely senior engineers (no principal and higher).\\n- Social Security - I thought Bay Area was relatively safer than the smaller US states, but these days [driving on the highway also can get shot](https://www.youtube.com/watch?v=0ybiHCxNb3w), so I don\'t know anymore. I think SG is definitely safer, at least you definitely won\'t kena any racist remarks or comments while walking on the streets.\\n- Personal Happiness - Obviously you\'d have fewer friends and family if you\'re in the US. If that\'s important to you then life there might be hard. But you can make new angmoh friends or hang out with the steadily growing SG community over there.\\n- Dating Scene - If you\'re single, it might be hard to find a long-term partner there. The female Singaporean engineers there are mostly taken, those that are not, probably want to stay single. Dating there will be quite hard! I know of friends who got together with Americans/immigrants and then they get a green card and plan to stay there for good. You can consider that too.\\n\\nI would describe myself as a small fish in a big pond when I was in FB US and am now a big fish in a smaller pond in FB SG. I enjoy my current work and team in FB SG and I see myself being in this role for a few more years at least.\\n\\n### Are Facebook internal hackathons only within branches? Eg. only within FB Singapore?\\n\\nThey are kinda global in the sense that the timelines are global but each region has different people leading it for the regional offices. Participating teams will take part in the regional selection and winners of the regional ones come together to present to the global heads.\\n\\n### What is the difference between Software Engineer and Front end Engineer at Facebook, and considering that my experience lies mostly in Front End Engineering, should I only be applying to the FE role?\\n\\nDifferences answered above. If you\'re solid in your Front End web fundamentals (HTML/CSS/JS), and suck horribly with DSA, I think you might stand a better chance going through the Front End interview loop. Unfortunately as of writing FB SG doesn\'t hire Front End Engineers so you\'d have to look overseas for such a role.\\n\\n### In the past one year, I have been hearing quite a lot of things about FB Reality Labs, and I heard that quite a significant portion of FB engineers are working on it now (and I think you are as well?)... do you have any thoughts about how it feels to work there and perhaps the future prospects?\\n\\nI work on selling FRL hardware, not directly on FRL hardware/software itself. If you haven\'t heard of the [metaverse](https://www.theverge.com/22588022/mark-zuckerberg-facebook-ceo-metaverse-interview), you should read up about it. I don\'t have too many opinions on the future of FRL but I can say that Quest 2 is the market leader in terms of VR headsets and [Quest 2 was a major driver behind FB\'s $885 million 2020 Q4 non-ad revenue](https://www.roadtovr.com/zuckerberg-quest-2-mainstream-vr-headset-facebook-q4-2020-earnings/).\\n\\n### What engineers is Facebook looking for - especially for New Grads? At the moment, I have knowledge on a breadth of tools but when asked on under the hood stuff, I can only explain what the tool / framework is trying to extract instead of going in depth as to how stuff actually works. Is the firm looking for new grad engineers who are language / tool / framework agnostic and can work towards building the skillset within the firm - or people who already have a speciality?\\n\\nFB uses Flow (for JavaScript typechecking) and Hack (typed version of PHP) which most people outside of FB won\'t use. If we were to hire only people who have prior experience with them, then we\'d have a really hard time filling our head count.\\n\\nWhen tech companies hire SWEs, usually it\'s for a generalist position and they would expect the employees to pick up any new language or tool to get the job down. If you master your fundamentals, doing that shouldn\'t be too hard. So really most companies would want to hire people who can learn fast and adapt. The exception is if you\'re a super senior person (think principal level and above), then you\'d be hired for your specialized skillsets probably because the company needs some subject-matter expert in that area. But most of you are still undergrads, that doesn\'t apply to you.\\n\\nAt the end of the day, many language and tools are similar-ish. New technologies learn from existing technologies and improve on them, learning new technologies isn\'t always that foreign.\\n\\nHowever, to be a good SWE, I would recommend peeking beneath the abstraction layers and understanding what problem this technology is trying to solve, how it works under the hood, and what advantages/disadvantages it has compared to similar technologies. That\'s why I love Open Source, all the code is public - you can read the code, look at how the projects are structured, and even contribute to them. I also love reading articles comparing technologies so that I know what tradeoffs the projects are making and what\'s the right tool for the job. Don\'t be a mindless drone who uses technologies without knowing why you are using it instead of alternatives. That\'ll be an easy way to get phased out really soon, especially considering how fast technologies move.\\n\\n### In my conversations with most engineers from US tech companies, I often hear that one of the major shortcomings of working in the Singapore offices is that they are more auxiliary in their functions, and that opportunities for \\"core\\" engineering work are few and far between. Since you have worked in both the Menlo Park and SG offices, I\'d love to hear your response to this within the context of Facebook.\\n\\nAnswered above in the US vs SG comparison.\\n\\n## Personal Experience\\n\\n### Can I know about the project you\'re involved with in FB?\\n\\nI\'m currently working on a multi-year project which I can\'t reveal the details until we launch next year. Last year, I worked on Facebook\'s e-commerce websites - https://www.oculus.com and https://portal.facebook.com. I built design systems in React and a CMS framework to allow non-engineers to change the marketing content on oculus.com anytime they wish. One of the problems my team works on solving is to decouple marketing launches from engineering work, enabling the business teams to launch new products and campaigns on our e-commerce websites.\\n\\n### Why did you choose front end engineering, and separately, how do you think the workload at Facebook compares to that of other \\"top\\" companies such as Google?\\n\\nAs a student I also liked to do design, so it was very cool for me to be able to implement my own designs on the web. That\'s why I chose to do client side engineering. As to why the web, I like the fast iteration and release cycle of building on web platforms. My first hardcore CS course was actually CS3217 (I only took CS1010E and CS1020E prior to that), so the first proper software I wrote was on iOS platform. Developing on mobile is too troublesome for my liking, because I often need a physical device, compiling the app takes so long, and you have to play by the platform\'s rules. They could take down your app anytime they want. On the other hand, the web is much more open and anyone can launch any website they want in a matter of hours. Being able to show people what I built by giving them a URL is an exciting experience that never gets old.\\n\\nI haven\'t worked at Google so I can\'t comment on workload at Google. But Google is known as a good company to \\"rest and vest\\" whereas Facebook has faster promo cycles and rewards their top performing employees disproportionately.\\n\\n### Am I correct to interpret that you started at Grab after graduation? What internships did you do during your studies?\\n\\nYes I worked at Grab for two years after graduation, you can check out my LinkedIn. Regarding university internships, Year 2 I did CVWO, Year 3 NOC in Silicon Valley for EasilyDo (now called Edison), Year 4 I was a Game Producer (non-programmer!) in SUTD Game Lab (previously MIT Gambit program). Back during my time, overseas internships weren\'t common. The number of Google and FB interns each year was fewer than 10.\\n\\n### I\'m also curious about what you do in your role as a Front End engineer, and why you decided to work at Facebook?\\n\\nAs a Front End Engineer at Facebook, I primarily write JavaScript and some Hack (PHP with types). Being at Facebook is fun because I get to do front end work which isn\'t product, such as building React-based design systems, front end tooling, lint rules, CSS frameworks (Infima), Static site generators (Docusaurus).\\n\\nFacebook is the leader in terms of front end web technologies. If you develop on the web, you would more likely than not, be using some of Facebook\'s open source work, whether directly or not. There\'s React, Flux, Jest, GraphQL, React Native, Docusaurus, Draft.js, Relay, Flow, just to name a few. By working at Facebook, I also got the chance to work on Docusaurus and for two years, led the development of Docusaurus v2, which is one of the projects I am most proud of in my career. Today, Docusaurus is powering most of Facebook\'s open source websites. Many of the open source leaders I look up to were also at Facebook. I got to contribute to many high profile open source front end projects by Facebook and also work alongside the creator of React (Jordan Walke) on improving the front end of Facebook\'s Ads Interfaces. Not to mention that Facebook employees will be the first to dogfood React\'s new APIs and participate in design discussions and influence the future roadmap of React.\\n\\nOn the culture and working environment front, I have always vibed with Facebook\'s hacker culture and products more than Google\'s, so naturally I chose Facebook over Google even though their offers were comparable and I was given a chance to work on Google\'s search results page.\\n\\nFacebook is the best place for a Front End Engineer to grow and learn from the very best. So it was the most obvious choice for me and I\'m glad I made that decision. It\'s the best place I\'ve worked at thus far (almost 4 years!) and also financially a great choice.\\n\\n### Could I ask about your personal experiences at FB in terms of learning opportunities and the work you do? :)\\n\\nThe learning opportunities depend on many factors - individual preferences, team, projects, luck. Facebook is such a large company that covers virtually almost every domain of technology one can be interested in. With great internal mobility, it isn\'t hard to find a project that one will be passionate about. The benefits (and also downsides) of working at such a large company is that you often have to think about scalability in your work. How do you scale your work to the tens of thousands of engineers using your libraries or the billions of users using your product?\\n\\nFacebook is also a company which takes the growth of employees very seriously. We have clear levels and expectations for engineers, supportive managers who really care about the growth of their team, mentorship programs available for anyone who wants to grow in a particular area. One of a manager\'s core responsibilities is to grow their team and employees, and they are being evaluated on that, so you can be sure that they treat it seriously. We have weekly 1:1s with managers and with our leads. Personally I\'m mentoring around 3-4 junior engineers and helping them to grow into senior engineers in both their technical and organizational skills.\\n\\nI\'ve answered about my work above.\\n\\n### What made you and the team came up with the idea of NUSMods and NUSWhispers? I think its really great to code for good and fulfilling stuff rather than coding for corporate means\\n\\nI didn\'t come up with NUSMods. [Beng](https://nusmods.com/team) did. I helped to build features (my favorite being theming and dark mode), recruit members into the team, and also started the v3 rewrite which is the one you are using now. Most of the credit would go to [Yi Jiang](https://www.github.com/ZhangYiJiang), [Li Kai](https://www.github.com/li-kai) and [E-Liang](https://www.github.com/taneliang) for the current version. NUSMods code base isn\'t exactly that big, but it took us over a year of work to rewrite it on a modern stack.\\n\\nShout-out to [Christopher Goh](https://www.github.com/chrisgzf) for taking the helm now! Joining NUSMods was one of the best decisions in my life, as impacted the lives of so many students (I daresay above 100k), learnt so much from working on it (it\'s a relatively complex web application), and it helped me grow my network of like-minded individuals. **We need more people to contribute so that the project can live on.** Notice that the NUSMods core team (and alumni) have pretty zai backgrounds? Correlation or causation? Maybe both.\\n\\nI came up with the idea for NUSWhispers but I didn\'t write much code for it. I was tutor for a web development course (CP3101B) back in 2015 and I proposed that idea to some students. I\'m glad they did a darn good job of it. Back then I wanted to create a platform that could connect and help students around the school and the idea of an anonymous platform/page sounded like fun.\\n\\nI like building stuff that people use, and after graduation I try to open source my stuff. This website you\'re reading now is also one of my largest open source work (in terms of popularity).\\n\\n### I understand that you\'ve been in FB for a couple of years, and worked in tech companies like Grab as well, given your prev/current experiences + what you\'ve heard from fellow colleagues and peers, in your opinion what makes FB different from the other tech companies in terms of work done and how an entry engineer could expect to contribute?\\n\\nI have only worked at two companies, so I wouldn\'t say I have seen a lot. But a few things stand out to me about FB as compared to other smaller companies:\\n\\n- Top of the market compensation. It\'s really crazy a lot. Maybe not as much as quant trading firms, but if you also factor in other stuff like interesting work, social impact, then to me FB still comes up on top.\\n- Bottom-up culture. In some companies, engineers are treated like mindless drones and expected to just execute. But not at FB. At FB, engineers are expected to do a fair bit of product and project management, propose ideas and lead the roadmap for their team, especially if their team\'s product is a highly technical one. We have lots of flexibility and autonomy to manage our own work and what we want to do with our time. As someone who has many ideas and likes to build them, it suits me well.\\n- Lots of responsibilities given. FB trusts you to do the right thing. You could technically bring down facebook.com on your first day of work if you were careless (or evil).\\n\\n### How do you run your team? This question is relating to the culture you foster within your own team.\\n\\nWe have very few processes. My team is excellent so I trust them to do the right things and they don\'t disappoint. In my current multi-year project, I broke it down into smaller parts and pieces and assigned them to my teammates according to their interests and expertise. I set the guidelines and some general engineering principles, make sure my team is aware of them and we stick to them when developing. We set goals for the half and then we\'re pretty much running the project each on our own. On a day-to-day basis, I spent about half my time writing code and the other half reviewing code and attending meetings. I\'m also mentoring a few engineers and I guide the newer engineers more and provide them with constant feedback on technical work and behavioral changes that could help them to grow.\\n\\n### How has Facebook impacted your career in terms of learning and growth and since you probably have many FANG companies to choose from, what is Facebook unique selling point to you personally?\\n\\nBy working at Facebook, I got to see how large engineering teams operate at scale, how products are developed and launched to millions of users, and learn from the very best engineers in the world.\\n\\nFront end and open source. I answered in more detail above.\\n\\n### Are most of the projects at Facebook internal tools for the company or more for the public/users? Or does this depend on the team you work at?\\n\\nThere\'s a good mix. Yes it depends on location as well. Most infra teams and in the bigger engineering offices (US, London). Singapore is still new and growing rapidly.\\n\\n## Career\\n\\n### I\'d like to seek your advice on what I should be prioritizing in my next two years of school in order to gain relevant skills/experience to stand out to FB recruiters when I graduate.\\n\\nWork on being a good engineer who has mastery of the fundamentals. Good grades, impressive internship experiences, side projects, etc are important but only for getting the interview. At the end of the day it doesn\'t matter how much your CAP is if you can\'t answer the interview questions, which boils down to your mastery of the skills needed to being a SWE. Do things that you are interested in AND also benefits you.\\n\\n### Just wanted to hear your opinion on how much emphasis I should place on personal projects, grades, LeetCode, hackathons/coding challenges, job experiences, CCA involvement, etc.\\n\\nThis is a hard question to answer because everyone is different. Some people are just born smart and don\'t have to study much and still get their grades. Some people are just not cut out for studying, but are great at building impactful side projects. Know your comparative advantage and leverage it. Personally, I could probably do back end work if I tried hard enough but I just don\'t enjoy doing it. I leverage my passion for design and attention to detail to build user interfaces and related tooling instead.\\n\\nStrike a balance between breadth and depth. As undergrads, you can have a lot of room to explore and also relatively low stakes environment to fail. Take this chance to try out a lot of things, then choose what you really like and are good at. You can specialize after you have tried out enough things and know what you want and are good at. I\'ve tried out back end, mobile, game development and prefer front end development the most.\\n\\nBy now you should know that not every investment reaps the same level of rewards. CCAs which aren\'t related to CS can be fun, widen your social circle and improve your soft skills. If that\'s important to you, by all means go ahead. But if you suck at programming, and spend all your spare time on random CCAs which doesn\'t help you in your craft, then you\'ll probably end up as a mediocre programmer. Back in school, I never really had an official CCA - I chose to do tutoring, work on open source stuff like NUSMods, and working as a boarding councillor at NUS High (sort of like RA but for NUS High Students), which gave me free accommodation near school). I liked the balance and diversity of the activities I had.\\n\\nMy CAP isn\'t that high - got first class but not near 5.00. I reckon I could get A+ for every module if I really spent all my time studying, but studying isn\'t exactly my favorite activity to do. I got my As usually from modules which were project-heavy. I value and enjoy the hands on experience more than the mugging experience.\\n\\nI\'m very lucky that Software Engineering exists so that there\'s something meaningful which I can spend my time on, I enjoy doing, and also pays the bills.\\n\\n### I want to learn as much as possible from you about topics that might benefit me as I\'m graduating next year.\\n\\nDSA. No DSA mastery, no passing of interviews, no Facebook job offer.\\n\\n---\\n\\n**_I am not a recruiter and I might have answered some of the recruiting or internship-related questions wrongly, so take them with a grain of salt. Opinions expressed are my own and do not represent the views of my employer._**"},{"id":"importance-of-communicating-effectively-as-engineers","metadata":{"permalink":"/blog/importance-of-communicating-effectively-as-engineers","source":"@site/blog/2021-04-12-importance-of-communicating-effectively-as-an-engineer.md","title":"Importance of Communicating Effectively as Engineers","description":"_tl;dr: communicating effectively broadly and frequently helps you grow as an engineer and we have many tools built to do that!_","date":"2021-04-12T00:00:00.000Z","formattedDate":"April 12, 2021","tags":[{"label":"career","permalink":"/blog/tags/career"},{"label":"communication","permalink":"/blog/tags/communication"}],"readingTime":7.895,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","title":"Engineering Lead at Facebook","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"Importance of Communicating Effectively as Engineers","slug":"importance-of-communicating-effectively-as-engineers","author":"Yangshun Tay","author_title":"Engineering Lead at Facebook","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["career","communication"]},"prevItem":{"title":"Facebook Career Q&A","permalink":"/blog/facebook-career-questions-and-answers"},"nextItem":{"title":"Are Front End Development Skills Enough for a Career?","permalink":"/blog/are-front-end-development-skills-enough-for-a-career"}},"content":"import BadCommunicationURL from \'@site/static/img/bad-communication.jpg\';\\n\\n**_tl;dr: communicating effectively broadly and frequently helps you grow as an engineer and we have many tools built to do that!_**\\n\\nAt Facebook where I work at, strong communication is crucial for a successful career. As engineers, sometimes we get too focused on execution and it\'s easy to forget about communicating our work broadly. Perhaps some of us are new to a large engineering organization and previously did not have the tools to foster communication nor was it emphasized by the company.\\n\\n\x3c!--truncate--\x3e\\n\\nI love to code. Personally, I would love to shut off all communication channels and focus entirely on coding if I could. However, doing that will probably have disastrous effects. Communication is super important and I learnt that the hard way when I first started at Facebook. In my first year at Facebook, I made a few painful mistakes related to communication. I changed the project plans and timeline without informing my tech lead, resulting in my teammate having to cover me at the last minute and do the work I reprioritized without telling anyone. In another instance, I didn\'t communicate that I was going to do some work that my teammate had planned to do, resulting in wasted efforts. From then on, I made a mental note to myself to communicate broadly and early wherever possible and seek alignment. I\'d err on the side of over-communicating rather than under-communicating (though sometimes I still forget).\\n\\n<div class=\\"text--center\\">\\n\\n<figure>\\n    <img alt=\\"You cannot have bad communication if you never communicate\\" src={BadCommunicationURL} />\\n    <figcaption>Just like you can\'t cause any bugs if you don\'t write any code.</figcaption>\\n</figure>\\n\\n</div>\\n\\n## Why is communication important?\\n\\nMost engineers in organizations don\'t work alone. When you work with people, you have to communicate with them \u2014 to set expectations, seek feedback, align on decisions, what not. However, given that remote working is the norm for most of us now, we rarely see each other face to face (I haven\'t met anyone on the team in person since remote work started). In product teams like the ones we have in Commerce Engineering Singapore, we work with a myriad of XFN partners across the globe in different timezones. These factors make it challenging to be in regular touch and makes it even more important to communicate widely. We have to explicitly communicate through stand ups, weekly syncs, retros, Work Chat messages, Workplace posts, etc.\\n\\nCommunicating well frequently and broadly helps you to:\\n\\n### Broaden your impact\\n\\nIf you have built something that\'s useful for yourself/your team, chances are, they will be useful for others as well, so tell more people about it! My first project at Facebook was to build Sentinel, an internal code attribution tool for the humongous Ads code base with nearing a decade\'s history. The tool solved the problem of people/bots changing a set of files which they were unfamiliar with and not knowing who the best reviewers for those changes were. Nothing about the tool was specific to Ads. After building an MVP (Minimum Viable Product) version of the tool, we reached out to various tools within Facebook which use their own bespoke code attribution approach and we eventually helped to replace them with Sentinel attribution. We also integrated it with popular tools like our IDE (a FB-specific VS Code), our internal component library, and our internal in-browser code explorer. At the end of that half (2018 H1), Sentinel was used by 2% of all diffs at Facebook, which was a pretty significant number. As of writing, over half a million diffs at Facebook have used Sentinel and I would say a huge part of its success was due to the network effects generated by word-of-mouth advertising by our early adopters, our push to integrate it into popular tools, and links within these tools that Sentinel was powering the attribution.\\n\\nTakeaway \u2014 Make a noise! **A good product that many people use has more impact than an excellent product that few people use.** Sentinel wasn\'t perfect at the time of launch but it worked well enough. One of the easiest ways to get people to use your product is to tell people about it! It can\'t get any easier. Getting some people to use your product early also gives you the chance to iterate on feedback and make it better before you launch it to a wider audience.\\n\\n### Improve your career performance and progression\\n\\nCommunication has a huge impact on one\'s performance. If you aren\'t able to effectively update your manager on what you are doing, it is hard for them to help you stay on track to ensure you meet expectations for the half. At Facebook, Communication is explicitly stated as an evaluation axis of our performance review, but realistically, every axis involves communication. We saw how effective communication helps expand one\'s project impact in the Sentinel example above. Better engineering practices should be communicated to folks who work on the same code base so as to efficiently deliver products of excellent implementation quality. Strong communication also leads to successful conflict resolution, mentorship and recruiting.\\n\\nHere\'s a scenario on how communication impacts calibrations - Alice\'s manager put her up for promotion to Staff Engineer after successfully delivering on an impactful project. However, due to lack of communication and visibility about her project, it\'s the first time other managers in the room heard about this project and many raised questions regarding it due to their unfamiliarity with it. This made the calibration process much harder than it should have been had Alice communicated about her project broadly earlier on.\\n\\n### Influence\\n\\nInfluence is a core skill you need to develop as you grow your career, and communication is at the core of it. Senior folks are leaders and influential and are effective communicators. This is true regardless of IC (individual contributor) track or management track. Senior Engineers are expected to be able to influence the engineering culture in the broader team and possess strong communication skills to be able to explain technical information effectively. Recently I attended a meeting with a very senior Software Engineer and was blown away by how he managed to explain the concept of cookies in such simple terms to the non-technical folks in the meeting and how effective communication helps you to get things done. For those who are interested in embarking on the manager track in future, please also know that most of an engineering manager\'s job involves communication.\\n\\n### Foster alignment and save effort down the road\\n\\nAt large companies of similar scale as Facebook, it\'s not uncommon for two teams at Facebook to face the same problem. I\'ll use Sentinel as an example again. By communicating about the project broadly and early, we reduced the possibility of teams working in silos to solve the same problem and leading to duplicated efforts. By knowing which teams faced similar problems and understanding their unique circumstances, we were able to collaborate on the problem and accounted for the different needs of the various teams, achieving a 1 + 1 = 3 effect.\\n\\n### Facilitate project planning and ensure timelines are met\\n\\nImagine this extreme (but still plausible) scenario - Bob and his team have spent a few months working on a huge project which was slated to launch next week. However, the project is only half-completed due to unforeseen technical difficulties and lack of manpower. If Bob had communicated about the difficulties and progress earlier, his manager could have allocated more manpower earlier to help out, and the team would probably be in a better position to meet their deadlines. This scenario is unrealistic at Facebook in the sense that such issues would probably be caught earlier because of weekly syncs and progress update posts. However, it is still possible for smaller projects where there aren\'t any/many syncs.\\n\\n## Ways to communicate effectively\\n\\nHopefully by now you agree with me that communicating effectively broadly and frequently is important! Here are some tips on how to go about doing that:\\n\\n### Leverage Communication Channels\\n\\nEach company has its own communication channel - Slack, Discord, Google Suite, etc. At Facebook, we use [Workplace](https://workplace.com/), which is similar to the core Facebook app, but for your company and every co-worker is a friend. Workplace is literally a communication tool and it is also the easiest way to get the word out about something. Draft a Workplace post/note and post it in the relevant groups. Attach screenshots/videos to better illustrate the point and catch peoples\' attention. Add tl;drs at the top of your posts. Structure your posts according to sections for better organization. If you are unsure about what content should go in your post, seek a review from your manager/tech lead, most likely they\'ll be happy to help.\\n\\n### Write Wikis\\n\\nWrite wikis for posterity and so that your work appears in intern search results. Add links to your new wiki in existing relevant wikis. Doing all these improves the discoverability of your work.\\n\\n### Shamelessly reach out to folks\\n\\nIf you know of someone/another team that would benefit from your work or the information, reach out to them and let them know! Even if they don\'t have an immediate need for your work, they might in future, or can inform others about it. The relationships you build along the way might surprise you.\\n\\n---\\n\\nThanks to my manager [Nishita Agarwal](https://www.linkedin.com/in/nishita-agarwal-51872514/) and my teammate, [Yao Yang Leow](https://www.linkedin.com/in/leow-yao-yang/) for proofreading and giving feedback on earlier drafts."},{"id":"are-front-end-development-skills-enough-for-a-career","metadata":{"permalink":"/blog/are-front-end-development-skills-enough-for-a-career","source":"@site/blog/2019-11-03-are-front-end-development-skills-enough-for-a-career.md","title":"Are Front End Development Skills Enough for a Career?","description":"I attended NUS Hackers\' Friday Hacks recently where I met an undergrad freshmen who asked me a question regarding Front End as a career.","date":"2019-11-03T00:00:00.000Z","formattedDate":"November 3, 2019","tags":[{"label":"career","permalink":"/blog/tags/career"},{"label":"front end","permalink":"/blog/tags/front-end"}],"readingTime":7.575,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"Are Front End Development Skills Enough for a Career?","slug":"are-front-end-development-skills-enough-for-a-career","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["career","front end"]},"prevItem":{"title":"Importance of Communicating Effectively as Engineers","permalink":"/blog/importance-of-communicating-effectively-as-engineers"},"nextItem":{"title":"Facebook Open Academy Reflections","permalink":"/blog/facebook-open-academy-reflections"}},"content":"I attended NUS Hackers\' Friday Hacks recently where I met an undergrad freshmen who asked me a question regarding Front End as a career.\\n\\n\x3c!--truncate--\x3e\\n\\n> I\'m honestly quite into front end development \u2014 web technologies, UI/UX, web design and stuff. But with there being more and more accessible to new developers (create-react-app, parcel and such), I just can\'t help but wonder if these skills are sufficient to survive in the tech industry today. Not that it\'s a bad thing! Lowering the barrier to entry for programmers is always good. However, for those like myself who would like to pursue front end development as a career, I\'m just wondering if having these skills are enough.\\n\\nInteresting question. I\'ve wondered the same question to myself before but convinced myself that I\'m probably fine just dabbling in Front End development for now. \ud83d\ude0c\\n\\n## Front End is complex and getting increasingly so\\n\\nMost people would have used websites like facebook.com, youtube.com and gmail.com. These applications have hundreds of engineers working on them (thousands if you include the back end) due to the demanding nature of the application - it has to load fast, it has to be secure, it has to look pretty. These days, front end development is no longer just about building websites rendering a static HTML. Many websites these days are in fact web applications and a lot of thought has to be put into the application architecture, and that requires good software engineering capabilities.\\n\\nThat\'s why you see many Front End tools these days like React, Redux, Relay, CSS modules, webpack, etc. These tools exist because of the ever-increasing requirements of building rich and performant user experiences on the web. [Being a good Front End developer](https://www.toptal.com/front-end/how-to-hire) is very hard, there are many aspects to know about - HTML, CSS, JavaScript, Browser APIs, Security, Performance, Animation, SEO, Networking, the list is non-exhaustive and growing. There are always new problems to solve and new things to learn. [JavaScript fatigue](https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4) was a term pretty common a few years back due to the explosion of tools in the Front End ecosystem. Things have gotten more stable but the JavaScript community is currently still one of the most fast-moving communities.\\n\\n## Does the rise of mobile threaten the existence of web developers?\\n\\nMany products now have a native mobile app version and that might make people think that the existence of Front End (web) developers could be threatened. I think that is only true to a small extent. Certain applications like Uber and Lyft make sense to be mobile-first, but there are also many complex professional applications where web (or any interface with a larger screens) will always prevail, such as office productivity and design software. Viewing things at a more macro scale, both mobile apps and web apps fall under the category of client-side applications. Many core skills important for being a good web developer are also important for mobile app development - they are transferable across platforms.\\n\\nTools like [React Native](https://github.com/facebook/react-native-website) and [Flutter](https://flutter.dev/) have also been created to help engineers build products across platforms by only writing the code \\"once\\" (in quotes because that dream is still in development). This approach is not a silver bullet solution and has yet to prove itself adequately, but for prototyping small apps or even just certain parts of your mobile app, it works pretty well. In React Native, you write your application in JavaScript using React Native primitives, and the React Native runtime runs the code on the JavaScript engine in the platform to construct native app UI views and handle application logic. It\'s pretty similar to writing typical web front end code. Facebook\'s Ads Manager App and the Marketplace tab are built using React Native. There are numerous technologies that enable you to build native apps on mobile platforms by knowing web front end development.\\n\\nEven though mobile usage is on the rise, there still exists many use cases where the desktop still excels at. Google Suite, Microsoft Office, Design tools are still more efficiently operated on desktops. In fact, many desktop applications these days are built on HTML5 technologies instead of native desktop code using tools like Electron to package web application code into an executable shipped to users. You might already be using some of them without knowing - Slack, Discord, WhatsApp Desktop, VS Code, Atom Editor, just to name a few. I think developers who are only familiar with native desktop platform engineering skills have more reasons to worry than Front End developers.\\n\\nThe web is incredibly cross-platform!\\n\\n## Jack of all trades, master of one\\n\\nHowever, I think that being a Front End development in many regards, is considered a specialized position. That\'s why it\'s important to be \\"T-shaped\\". I first got introduced to this term through my ex-manager at Grab, Tim Goh. He advised me to have a specialization (front end), yet still know a bit about everything. In other words, you are strong in your core fundamentals, but you also specialize in a particular area.\\n\\nThis is good advice and it\'s not new advice. In most university courses, students are expected to study the fundamental courses before choosing their area of specialization. In the context of a School of Computing in National University of Singapore, students start their in school by taking basic classes in Algorithms, Data Structures, Software Engineering, Operating Systems, Computer Networks, before choosing their specialization in deeper areas like Compilers, Computer Graphics, AI and Machine Learning, Media, Networking and more.\\n\\nHaving a strong foundation enables someone to make switching domains a possibility. There will definitely be a ramp-up process, but it can be made smoother with solid foundations, and with the skill of learning how to learn fast. In the extreme case where the web becomes irrelevant, and no companies want to hire front end developers anymore, front end developers with strong fundamentals can always slightly switch tracks by doing mobile or back end engineering, or even the hottest UI platform (AR/VR?) out there.\\n\\nHaving good tools to use (like Create React App, Parcel) doesn\'t eradicate the need for Front End developers to possess good software engineering skills. What will happen if you are the person tasked to build the tools? Great Front End developers (or Software Engineers really) go beneath the abstractions layer, understand how their tools work, and what problems the tool set out to solve. They also constantly seek to challenge and improve the status quo by building better technologies to cater to the ever-increasing demands.\\n\\nAt Facebook, the Front End Engineers are Software Engineers first, domain experts second. Many of the Front End engineers I know at Facebook have a deep understanding of the technical stack and don\'t just work on stuff related to the browser. At Facebook scale, front end work also involves building a lot of infrastructure to make our front end code base scale well with the growing technical and people needs. That means writing [codemods](https://github.com/facebook/jscodeshift) to do large-scale refactoring, inventing new [UI](https://reactjs.org/) [paradigms](http://facebook.github.io/flux/), performant [testing frameworks](https://jestjs.io/), creating [type-checkers](https://flow.org/) for untyped languages, changing the ways we [fetch data](https://graphql.org/) from our servers and [managing it on clients](https://relay.dev/). These tools wouldn\'t exist if the Front End engineers at Facebook didn\'t possess strong software engineering skills.\\n\\n## Pick up new, relevant skills\\n\\nIt can be hard to pick up new skills at work in an unrelated domain if there are no opportunities to do so. Thankfully (or not), due to the explosion of tools in the Front End ecosystem, I\'ve found an area which I have gained a new-found interest in - Programming Languages Theory (Static Analysis, Compilers, and Intepreters). Static analysis is incredibly important in tools that I use on a daily basis - it\'s being used by the module bundlers for bundling JavaScript files together, generating CSS from more user-friendly CSS syntaxes, compiling modern JavaScript into older versions of JavaScript that more common browsers can run, and even this blog post written in Markdown uses static analysis to be converted into HTML.\\n\\nI\'ve been toying with writing my own interpreter after learning this awesome book called [Crafting Interpreters](http://www.craftinginterpreters.com/) and will be further exploring this domain in my spare time, possibly building Front End-related tooling in future that leverages static analysis and compilation.\\n\\nAdding new skills to my arsenal in a related but different domain helps me to stay relevant in the event that the industry no longer needs Front End developers \ud83d\ude31\\n\\n---\\n\\nIn summary, although Front End development is considered quite specialized, there\'s enough demand and complexity for it to stay relevant in the years to come. What would threaten the web would be an entire shift of the way users interact with apps, perhaps to a non-visual paradigm like a brain-controlled interface. However, paradigm shifts don\'t happen overnight and there will be sufficient time to react (pun intended) in the case that ever happens. Being strong in your Software Engineering fundamentals and knowing how to learn new skills fast will help you in switching domains (and also careers).\\n\\n_Opinions are my own and do not represent the views of my employer._"},{"id":"facebook-open-academy-reflections","metadata":{"permalink":"/blog/facebook-open-academy-reflections","source":"@site/blog/2014-05-08-facebook-open-academy-reflections.md","title":"Facebook Open Academy Reflections","description":"Together with Soedar, Scott (Kaizhi) Meng, Minqi Chen, Joel Low, Camillus Cai, we took part in Facebook Open Academy under the module CP3101A Open Source Project. In my opinion, CP3101A was definitely one of the most memorable modules this semester.","date":"2014-05-08T00:00:00.000Z","formattedDate":"May 8, 2014","tags":[{"label":"facebook","permalink":"/blog/tags/facebook"},{"label":"open source","permalink":"/blog/tags/open-source"}],"readingTime":4.085,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"Facebook Open Academy Reflections","slug":"facebook-open-academy-reflections","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["facebook","open source"]},"prevItem":{"title":"Are Front End Development Skills Enough for a Career?","permalink":"/blog/are-front-end-development-skills-enough-for-a-career"},"nextItem":{"title":"Reflections of a CS1010S Head Tutor","permalink":"/blog/reflections-of-a-cs1010s-head-tutor"}},"content":"Together with Soedar, Scott (Kaizhi) Meng, Minqi Chen, Joel Low, Camillus Cai, we took part in [Facebook Open Academy](https://www.facebook.com/notes/facebook-engineering/facebook-open-academy-bringing-open-source-to-cs-curricula/10151806121378920) under the module CP3101A Open Source Project. In my opinion, CP3101A was definitely one of the most memorable modules this semester.\x3c!--truncate--\x3e\\n\\nThe cool stuff we did:\\n\\n- Went on an all expenses paid trip to Facebook HQ in Menlo Park and participated in a hackathon there\\n- Worked with students from MIT, CMU and other prestigious universities on open source projects\\n- Hacked on an open source project ([Galaxy](https://github.com/cvan/galaxy/) in my case) for 9 weeks\\n- Leveled up in web development\\n\\nThe 4 MCs I\'m getting from CP3101A will go towards my UEM credits, which doesn\'t count towards my graduation because my UEM MCs are already overflowing from Mech Eng and NOC modules. However, no regrets there, because it was this open source stint was still a very valuable experience, one that is extremely relevant to all software engineers in their career.\\n\\nHere are the combined reflections from us, the 2nd batch of NUS students who participated in Facebook Open Academy, with input mainly from Soedar, Joel, Prof Ben and myself:\\n\\n## Open Source Reflections\\n\\nParticipating in Facebook Open Academy allowed us to explore open source development in a guided environment under experienced mentors. From the program, we gained deeper insights into working in remote teams, improved our Git-fu, and gained first-hand experience on how to apply them on a real-world project.\\n\\nSubmitting pull requests is like riding a roller coaster - there is a sense of thrill when pull requests are approved and merged into the repository, yet a sense of disappointment when we receive negative feedback and have to make major changes. As the code that we have written is open to public scrutiny, it is extremely fulfilling when our code is accepted and deemed to have met the standards of the community. In this sense, working on an Open Source project definitely beats working on school projects, where the main emphasis is often to simply make the code work, and there is little emphasis on the quality of the code.\\n\\nWe became familiar with common open source workflows, making frequent use of Git features such as branching, rebasing, cherry picking, reset, etc, and saw a significant improvement in our Git-fu. Some of us had teammates who were unfamiliar with Git and we were frequently helping them clean up their pull requests and teaching them the proper Git workflow for the project. We saw that as a personal achievement because at the start of the program, we were only familiar with the common Git commands, but at the end of it, we are able to understand and execute complicated Git workflows. We have also come to appreciate Github as a well-designed platform that aids in the development of open source projects.\\n\\nA main challenge that we faced was having to work with teammates who were in different locations and time zones. We were used to working with teammates who were physically present (such as during school projects or on an internship), and never had the chance to work in remote teams. In our projects, we found that the communication overhead often reduced the momentum of our projects considerably. This is especially evident for the code reviews of pull requests: it would often take days before a pull request was thoroughly reviewed and merged.\\n\\nWe felt that we could probably have been more effective if we were more aware on how our actions would have affected our teammates. Upon reflection, there were times where our actions might have made some of the work done by our teammates obsolete, usually by implementing features that supersede what they have done or causing their work to be irrelevant. We should have been more aware of this, and probably clarified our intentions with each other, as well as worked more closely to resolve issues.\\n\\nWe have also been able to apply some of the ideas that we have learnt into our school projects. We found ourselves adapting the open source workflow into our school projects, and imparting the knowledge that we had gained to other schoolmates who did not have the opportunity to participate in the program. It was especially rewarding when others begin to appreciate the need for code review, and come to understand the open source workflow as well.\\n\\nTo conclude, we have often relied on many Open Source projects in our work. It is only natural that we should give back and contribute to the growth of open source projects. The Facebook Open Academy program has provided us with the opportunity to take the first step in contributing to Open Source, under the guidance and supervision of capable project mentors. We would definitely want to continue developing for our projects or joining other interesting projects, and play a more active role in helping the Open Source community grow."},{"id":"reflections-of-a-cs1010s-head-tutor","metadata":{"permalink":"/blog/reflections-of-a-cs1010s-head-tutor","source":"@site/blog/2014-02-27-reflections-of-a-cs1010s-head-tutor.md","title":"Reflections of a CS1010S Head Tutor","description":"From Aug 2013 to Dec 2013, I was selected by Asst Prof Ben Leong of NUS to serve as the Head Tutor for CS1010S Programming Methodology, an introductory programming course in NUS. It was a new NUS course that aims to impart fundamental concepts of problem solving by computing and programming using the Python language.","date":"2014-02-27T00:00:00.000Z","formattedDate":"February 27, 2014","tags":[{"label":"cs1010s","permalink":"/blog/tags/cs-1010-s"}],"readingTime":5.395,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"Reflections of a CS1010S Head Tutor","slug":"reflections-of-a-cs1010s-head-tutor","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs1010s"]},"prevItem":{"title":"Facebook Open Academy Reflections","permalink":"/blog/facebook-open-academy-reflections"},"nextItem":{"title":"CS3216 Post Mortem","permalink":"/blog/cs3216-post-mortem"}},"content":"From Aug 2013 to Dec 2013, I was selected by Asst Prof Ben Leong of NUS to serve as the Head Tutor for CS1010S Programming Methodology, an introductory programming course in NUS. It was a new NUS course that aims to impart fundamental concepts of problem solving by computing and programming using the Python language.\x3c!--truncate--\x3e\\n\\nThere were a few phases of this project:\\n\\n1. **Recruitment Phase** - Recruitment of strong programmers into the teaching staff team\\n1. **Course Preparation Phase** - Creating materials (lectures slides, tutorial questions) for the students and staff to use during the course\\n1. **Execution Phase** - After the semester has started, conduct weekly tutorials for our assigned students\\n1. **Wrapping Up** - Reflection on what went well and how we can improve for future semesters of teaching CS1010S\\n\\n## Approach\\n\\n### Admin\\n\\nThere were lots of administrative issues to handle, because being a new course, much of the course materials had to be newly prepared. We used tons of Google services for our admin (Google groups for communication, Google spreadsheets for issue tracking and student data, Google sites for documentation). We did not use specialized project management tools like Asana or Jira because everybody was comfortable with Google services and it seems to be sufficient for our purpose.\\n\\nI value good documentation as it helps orientate people that are new to a team. Hence I wrote a wiki document for the course so that new tutors would have an easier time familiarizing themselves with our working style. Also, during the course preparation phase, I would review the work of the other tutors to the best of my ability so that the quality of materials that we release to the students were of high standards. Being the source of information to tutors and students, I kept myself well-informed so that I could answer almost all questions thrown at me. I also ensured that everyone was up to date with the course\'s progress.\\n\\nI did not know Python prior to CS1010S and hence I had to pick it up on my own before the course material preparation phase even started. Fortunately, it was easy to pick up a new programming language because I have been exposed to various languages. To save the time of the other tutors, I gathered resources, created tools and teaching aids and shared them with the other tutors. Even though it took up more of my personal time, but overall it was for a greater good: It saved the staff team more time due to the large size of the team and helped everyone get the job done more effectively.\\n\\n### People Management\\n\\n\\"People\\" here, is divided into two categories - the staff team and the students. It was my first time managing a professional team of people. My approach was to get to know most of the people (staff and students) on a personal level outside the classroom. The motivation behind this was to better understand each individual\'s personality so that delegation of work could be more efficient and prevent mismatch of interests.\\n\\nAs the team was huge, and there were many side-roles to cover, I/Cs were nominated and some tutors would be in-charge of certain materials/aspects of the course. Whenever other tutors needed help, I would step in and took over their role or get someone else who is available to help.\\n\\nAs the Head Tutor, I also set a positive example by marking by students\' assignments as early as possible and topping the tutor leaderboard (yes, we had a leaderboard which showed the number of assignments we marked and the delay between a student submission and us marking it).\\n\\nIn making decisions, often I would seek the opinions of the other tutors so that everyone had a part to play in the final decision being made. This would give a sense of ownership of the course to people and trigger their intrinsic motivation to work hard on it.\\n\\n### Teaching\\n\\nI have done private tuition before but it was my first time standing in front of a class to conduct tutorials. I felt that I needed to customized my teaching according to the standard of the class. For the stronger classes, I did not always go through the code, instead, I encouraged the students to formulate alternative approaches to solve the problem.\\n\\nCaring for students was also essential to being a good teacher. Often, I chatted with them outside class and treated them as friends rather than students. This helped break the teacher-student barrier which helped in making the lessons more enjoyable.\\n\\n## Motivations\\n\\nI had a few main motivations behind undertaking the role as Head Tutor:\\n\\n- Learn to work with a team of talented individuals (elite bunch of tutors)\\n- Learn how to run a course well. Many courses in NUS left students uninterested in the subject matter\\n- Leave a positive impact in the students\' lives and possibly get them interested in a career in Computer Science\\n- Teaching the students to learn how to learn. Train them in being independent learners and increase their potential\\n\\n## What Was Done\\n\\n### Students\\n\\n- 230 students were taught programming concepts that may be needed to solve problems in the coursework by a professor and a team of 17 tutors\\n- Gave students a memorable time in NUS\\n- Sparked interest in many students to take programming courses beyond CS1010S (even though they were only required to take one)\\n\\n### Tutors\\n\\n- Lost plenty of sleep in the process\\n- Conducted 10 tutorial sessions and marked many missions\\n\\n### Me\\n\\n- Wore multiple hats (designing, admin, coordinating, chaperoning)\\n- Leveled up and grew by a whole lot (no longer just a coding monkey)\\n- Got to know many students and made meaningful relationships with them\\n- Came up with new teaching initiatives that helped students be better programmers\\n\\n## How It Turned Out\\n\\nI was rather glad with the outcome of the course and would deem it a success. It left a deep impression in many students\' hearts as the toughest, most painful, most time-consuming yet enjoyable freshmen module.\\n\\nI\'m also glad that my students didn\'t hate me. In my teacher performance report, I received an average rating of 4.56/5.00 in my overall effectiveness as a teacher. Positive remarks from my students included: hardworking, responsible, approachable, caring, friendly, efficient, patient and nice.\\n\\nOverall, I think it was a successful project with the combined hard work of everyone. (:"},{"id":"cs3216-post-mortem","metadata":{"permalink":"/blog/cs3216-post-mortem","source":"@site/blog/2013-12-08-cs3126-post-mortem.md","title":"CS3216 Post Mortem","description":"I survived CS3216 and it wasn\'t an easy feat in my opinion, given that I spent almost half my time on CS1010S this semester, the other half went to CS3216. Would like to give a quick run-down of my experience in CS3216, something like a review. Oh yes by the way, the current module review site sucks, someone build a better one please.","date":"2013-12-08T00:00:00.000Z","formattedDate":"December 8, 2013","tags":[{"label":"cs3216","permalink":"/blog/tags/cs-3216"}],"readingTime":12.2,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"CS3216 Post Mortem","slug":"cs3216-post-mortem","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs3216"]},"prevItem":{"title":"Reflections of a CS1010S Head Tutor","permalink":"/blog/reflections-of-a-cs1010s-head-tutor"},"nextItem":{"title":"Open Source","permalink":"/blog/open-source"}},"content":"I survived CS3216 and it wasn\'t an easy feat in my opinion, given that I spent almost half my time on CS1010S this semester, the other half went to CS3216. Would like to give a quick run-down of my experience in CS3216, something like a review.\x3c!--truncate--\x3e Oh yes by the way, the current [module review site](http://www.module-review.com) sucks, someone build a better one please.\\n\\n### CS3216 in General\\n\\nThis module has been **FUN**. Never have I built so many products within a span of a semester before. We had the freedom to do whatever we wanted in our assignments and final project, unlike other software engineering modules where students had to build to-do lists. However, this freedom and flexibility meant that the scope of the project depends on **you**. You can choose to simply meet the bare requirements or aim for the sky with a large-scale project. In my projects, my team(s) and I aimed to meet these three criterias: **usable**, **polished**, **valuable**. This is much unlike my past hackathon projects where I could only achieve polishness. A small, robust application that really works has more impact than an ambitious one that cannot be completed within the timeframe of the project.\\n\\nCS3216 is a huge test of versatility and my versatility was stretched near its limits throughout the course. My roles in the various assignments and the final project:\\n\\n- Assignment 1 (Facebook Assignment): **[Osmose](http://osmose.soedar.com)** - Front End Developer, UI Designer\\n- Assignment 2 (Facebook App Seminar): Tinder - Designer, Content Curator\\n- Assignment 3 (Mobile Web Assignment): **Qivi** - Front End Developer, UI Designer, Marketing guy\\n- Final Project: **[Una](http://una-org.github.io)** and **[Nutty Ninjas](http://www.nuttyninjas.com)** - Front End Developer, UI Designer, Creative guy, Marketing guy, Product guy and... Props maker\\n\\nThe final project really drained me out. I was wearing multiple hats and it was tough to juggle them. Shall go into further detail later.\\n\\nComparing with CS3217, it\'s hard to say whether CS3216 was easier or tougher. CS3216 and CS3217 were tough in their own ways, but one thing is for sure: It gets people addicted to these crazy software development modules and leaves them asking for more.\\n\\n<table>\\n\\t<tr><th>CS3216</th><th>CS3217</th></tr>\\n\\t<tr><td>4 x Group Projects</td><td>Individual problem sets, 1 Final Group project</td></tr>\\n\\t<tr><td>Product-focused, less on engineering</td><td>Engineering-focused, nice design is a bonus</td></tr>\\n\\t<tr><td>More flexible curriculum and scope - build (almost) anything you want</td><td>More structured - everyone builds the same app in the Problem Sets</td></tr>\\n\\t<tr><td>No hardware requirements</td><td>Requires a Mac, if not you\'ll have to camp at PL1</td></tr>\\n\\t<tr><td>Many students enter with existing web knowledge</td><td>Not many know iOS prior to the course</td></tr>\\n</table>\\n\\n### Assignment 1 - Osmose\\n\\nAfter working on Corspedia, and seeing a thousand hits a day during the CORS bidding period, I grew interest in creating school-related apps. After seeing the state of the CS1010S IVLE forums (we had a few hundred posts within the first two weeks of school), I had the thought of giving each module a homepage to organize the module-related questions integrated with real-time features, with the aim of promoting interaction among coursemates.\\n\\nMy teammates for this assignment were [Soedarsono](https://www.linkedin.com/in/soedarsono/), [Le Viet Tien](https://www.linkedin.com/in/viettien/) and [Soon Chun Mun](https://www.linkedin.com/in/chunmunsoon/), they are seriously among the best software engineers that I know in school. I proposed the idea of a StackOverflow x Disqus for NUS modules and the rest were agreeable with it. We knew each other\'s strengths and hence roles were assigned pretty quickly.\\n\\nThe name Osmose was chosen because I wanted to try naming a product after a proper English word/name. E.g. Path, Line, Amazon. Osmose also meant: _The process of gradual or unconscious assimilation of ideas and knowledge._ The theme colour of blue was chosen, because blue is the colour of water (osmosis).\\n\\nUsing [sails.js](http://sailsjs.org/), we got the back-end up in a snap, along with real-time sync features. Sad to say, I was the limiting factor in this assignment, because I spent the first a week and a half settling admin matters for CS1010S, and started on the front end work quite late. As we coded, we realized that there was no real need for sails.js, the \'magic\' that sails did for its users wasn\'t really relevant in our case and we still had to write the complicated stuff ourselves.\\n\\nBecause we started on the assignment later than expected, we were rushing to hit all the milestones few hours before the deadline, all of us stayed in school till 12mn to make the final commit together >\\\\_<\\n\\nIn retrospect, Osmose wasn\'t really innovative and there were many loopholes in the product design. We initially wanted to let CS1010S students try it, but after further thought, realized it still had a long way to go before it was good enough to replace IVLE.\\n\\n![Osmose](/img/osmose-1.jpg)\\n\\n### Assignment 2 - Tinder\\n\\nThis assignment started after Assignment 1 and ended before it. A non-coding assignment, we had to analyze and critique a Facebook app and do a class presentation on it. We picked Tinder because it was a highly controversial app and would definitely interest many. Tinder is an app which can match people who are mutually attracted to each other.\\n\\nMy teammates for this assignment were [Hendy Chua](https://www.linkedin.com/in/hendy-chua-833b2046/), [Minqi Chen](https://www.linkedin.com/in/minqi-c-86254339/) and Chen Liang, who were great presenters. There wasn\'t clear allocation of roles because the work required for this assignment wasn\'t too heavy. We came up with the content together and I designed the slides. Hendy gave great ideas on how to make the presentation funny and incorporated them into his content. For the first half of the presentation, Hendy made the crowd laugh with his jokes, while Chen Liang articulated the content well in the second half. This helped us score a decent grade for the presentation component.\\n\\nNext, there was the blogging component where we had to blog about an app presented in class by other teams and also go around commenting on others\' blog entries. This took up a lot of time as I went to read the posts by almost everyone in class. Crafting insightful comments also sucked up some time. A big thanks to my peers who took time to comment on my entry!\\n\\nThis assignment made me feel like a CNM student, with the amount of writing we had to do. But it was a good break from all the coding in Assignment 1.\\n\\n### Assignment 3 - Qivi\\n\\nI believe most students in class disliked assignment 3. This includes me as well. I blogged about how much I disliked mobile web development in one of the previous posts. Although I hate to agree, but mobile is the future. This assignment had to be there. I proposed the idea of transforming mobile devices into clickers. A plausible replacement for current clickers, which are extremely troublesome to use. The app was named \\"Qivi\\" - The acronym for Question Instantly, Vote Instantly.\\n\\nMy teammates for this assignment were [Zhixing Yang](https://www.linkedin.com/in/zhixing-yang-b8bb9556/), [Cheng Qing](https://www.linkedin.com/in/qingcheng/) and Navie. Since they were back end coders, I was left to do the front end by myself. Project management for this assignment was quite bad... We only really started during recess week and everyday felt like a hackathon. Being the sole front end developer, I was also worried that I couldn\'t complete it in time.\\n\\nUltimately, we cut features and removed the option of answering open-ended questions. Not using any server-side frameworks caused the API to be inconsistent and more bug-prone. Sigh. But we managed to finish in the end, hitting as many milestones as possible. The end-product was still buggy, but _done is better than perfect_ (lame excuse).\\n\\nAs there were two kinds of users for Qivi (creator and voter), it wasn\'t immediately obvious as to how to use Qivi. Hence I created a help page that demonstrated the flow of event creation and poll responding. A test event was also created. This walkthrough served two purposes: (i) Teach and show the graders how Qivi is supposed to be used. (ii) Guide the graders through a bug-free app flow so that the app appears less buggy.\\n\\nThe help page worked out and it\'s probably the reason why we scored extremely well for this assignment. But this doesn\'t change the fact that mobile web development is a big pain.\\n\\n### Final Project\\n\\nThe whole process can be broken down into a few stages: Ideation, Development, Refinement, Pivoting, Showcase.\\n\\n#### Ideation\\n\\nThe ideation process for the final project was pretty different from the previous assignments. We were choosing between two paths: (i) Aim for many users or (ii) Be the coolest app during STePS. Well, they certainly aren\'t mutually exclusive but it would be hard to achieve both.\\n\\nAfter some discussion, we chose the path of \\"being the coolest app during STePS\\" and started to think about how we could get more eyeballs during the event. Each booth gets quite a number of people visiting it, but there are only the 4 of us and a few computers. We would let many people slip by, given the limited amount of manpower and hardware we had. Hence, our product had to do the talking. Also, it would be ideal to allow everyone to try out the product _at the same time_. That would only be possible if the audience had a device of their own. Hence, the idea of a cross-display application where users can interact with in real-time, using their mobile devices.\\n\\nThese kind of applications are usually games. Dr Colin Tan and Su Yuen advised everyone against doing games for CS3216, for the obvious reason of the inability to product attractive art assets, which is crucial to the success of games. However, there are actually some kind of games that can be made by indie developers: minimalist games. These games are usually 2D, have a retro theme and have a flat design. After evaluating our resources and skills, we went ahead with the direction of building a game.\\n\\nWhat game should we build that was reasonable, given our timeframe, skills that would also fit the style of STePS? We eventually decided on a console-style, top-down, ninja-themed multiplayer shooter game. Players would play the game by using their mobile devices as controllers on a shared display.\\n\\n#### Development\\n\\nWe weren\'t exactly sure whether the idea of cross-display games would work out because of latency issues. Chun Mun was quick in prototyping simple demos to test the latency and they were surprisingly low. Soedar built a tank game using EaselJS to test the frame speed of the game while Viet Tien added a virtual joystick to test controller interactions.\\n\\nWe were satisfied with the results of our prototyping and were confident that the game would work fine. Together with my brother, we designed the assets and I developed the HTML for the non-game screens while Soedar, Chun Mun and Viet Tien worked on the game.\\n\\n#### Refinement\\n\\nWhen the first version of our ninja game was complete, we went around getting many of our friends to try. The general feedback from them was that the controller was hard to use and it was also troublesome to have to lock the orientation of the device before playing. Other feedback included giving a sense of purpose to the game by adding a leaderboard, monsters, and more flashy visuals. We took all these into account and made the necessary adjustments.\\n\\n#### Pivoting\\n\\nTwo weeks before the showcase, we met with our mentors from LambdaMu games and they recommended that our product should be the technology behind the game and not the game itself. Dr Colin and Su Yuen suggested the same. We were quite apprehensive about it because a library would not attract as many people as a game would. Also, there wasn\'t much time left to build another product.\\n\\nHowever, Soedar was confident of writing the library. We decided to give both the library and the game equal emphasis. Soedar completed **[Una](https://github.com/una-org/una)**, the library for writing cross-display applications, within 2 days. It\'s even [live on npm registry](https://npmjs.org/package/una) right now! I proceeded to create a marketing site for Una. Within a few days, our library was live.\\n\\n![Una](/img/una.jpg)\\n\\n#### Showcase\\n\\nWith everything in place, it was the time to embark on the final phase of the final project: preparation for STePS. We wanted to excel in STePS and hence we put in a tremendous amount of thought into designing our booth, our product, and our showmanship. The amount of milestones we wanted to be met by STePS day was insane. We kinda brought it onto ourselves (or rather, I coerced the rest into it).\\n\\nWe put ourselves in the shoes of a participant at a conference. What would catch the attention of a person who was surrounded by tons of booths and posters? We definitely needed flashy visuals and publicity. A good way to attract a crowd was to have a crowd in the first place. We made it super simple for participants to try out our flagship game, **[Nutty Ninjas](http://nuttyninjas.com)**, just by using their mobile phones and accessing a web page. To garner more eyeballs, we requested for projectors and screens. However, we got a room (SR3) to ourselves instead! Having a room was a double-edged sword because we were separated from the rest of the CS3216 booths and people may not notice us.\\n\\nTo solve this, I designed and printed many attention-grabbing posters, and we pasted them at the entrances of SoC, to direct people to SR3. Friends and family were invited to come down to visit our booth. We opened the doors of SR3 wide such that people would know that there was actually a booth inside SR3 and they would perhaps pop in and have a look.\\n\\nGreat thoughts also went into the way we pitched Una as a library that is capable of much more than just gaming. It is a library that is capable of changing the way people interact with websites.\\n\\nViet Tien reminded us about network issues causing some CS3217 projects unable to be demonstrated. That would be disastrous if it happened to us. Hence we formulated a backup plan of using our own router to create a local network in the event that the wireless networking in SoC failed and we could not rely on the school network for the demonstration.\\n\\nTo look more professional, we printed t-shirts and I made nametags for everyone (:\\n\\nOn STePS day, the crowd was amazing! Many were impressed by the concept and requested for our contact details. We barely had any time to eat. Most of our time was spent explaining Una and teaching people how to play Nutty Ninjas.\\n\\n6 weeks, 4 people, 3 products, Best Project. We made it (:\\n\\n![Team Una](/img/steps-team-una.jpg)"},{"id":"open-source","metadata":{"permalink":"/blog/open-source","source":"@site/blog/2013-11-30-open-source.md","title":"Open Source","description":"Open source projects have always fascinated me. I personally find it tough to work effectively in small teams, working with a large community in a public, collaborative manner will makes things unimaginably tougher. However, with good management techniques, effective communication and efficient workflows, the open source community have succeeded and produced excellent technologies such as Ubuntu, Android, Rails, Django, Bootstrap, AngularJS, just to name a few. These projects have had great impact on technology and are widely used by developers in the course of their work. Android, with Google\'s backing, has become the world most popular smartphone OS. I personally use many open source JavaScript projects such as AngularJS and Node.js for my own development.","date":"2013-11-30T00:00:00.000Z","formattedDate":"November 30, 2013","tags":[{"label":"open source","permalink":"/blog/tags/open-source"}],"readingTime":2.59,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"Open Source","slug":"open-source","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["open source"]},"prevItem":{"title":"CS3216 Post Mortem","permalink":"/blog/cs3216-post-mortem"},"nextItem":{"title":"Group Projects","permalink":"/blog/group-projects"}},"content":"Open source projects have always fascinated me. I personally find it tough to work effectively in small teams, working with a large community in a public, collaborative manner will makes things unimaginably tougher.\x3c!--truncate--\x3e However, with good management techniques, effective communication and efficient workflows, the open source community have succeeded and produced excellent technologies such as Ubuntu, Android, Rails, Django, Bootstrap, AngularJS, just to name a few. These projects have had great impact on technology and are widely used by developers in the course of their work. Android, with Google\'s backing, has become the world most popular smartphone OS. I personally use many open source JavaScript projects such as AngularJS and Node.js for my own development.\\n\\nI have been developing web applications for over a year now. Having completed the two most rigorous software development courses in NUS, CS3216 and CS3217 and surviving them well, I have picked up good software engineering skills and improved my development competency.\\n\\nHowever, almost all my software engineering projects were constrained within a school setting. I was only required to work in small teams and to meet predefined assignment milestones for the grades. These school projects were often abandoned after the course ended and gone to waste and it\'s quite a pity. School projects are rarely reflective of real-world software development, where there are many moving parts, a much larger code base, huge development teams, and release cycles.\\n\\nI hope to be part of the Open Academy Program because of the various unique opportunities it has to offer that I am unable to experience in school: working with talented people in remote teams, picking up industry-standard project management skills, getting exposed to new software development workflows. It seems like an entirely different experience filled with plenty of learning opportunities. I haven\'t had the chance to work with a large community spanning across nations but am eager to try it. Foreseeable problems include differences in time zones, language barriers, and also, every open source developer has their own day job to handle. However, given that many companies nowadays have remote offices and development teams scattered across geographical boundaries, knowing how to work in remote teams is becoming an increasingly important skill to hone.\\n\\nI like to learn and I believe I am a fast learner. 2 years ago, the only language I knew was C++ and all I could do was to compile simple programs with `gcc`. Almost 2 years later, I have developed and launched a few mobile and web applications, and gained a strong competency in front end web development. My ability and desire to learn and improve is my strength and I hope I can put them to good use in the Open Academy Program.\\n\\nWithout CS3216, CS3217 nor CS1010S in the coming semester, there won\'t be any module to inflict memorable pain in my life; I believe the Facebook Open Academy Program can be a decent source of challenge.\\n\\nFor a change, I hope to leave an impact by diving into the world of open source development and contributing code that will be used by developer communities around the world."},{"id":"group-projects","metadata":{"permalink":"/blog/group-projects","source":"@site/blog/2013-11-17-group-projects.md","title":"Group Projects","description":"The trouble with group projects:","date":"2013-11-17T00:00:00.000Z","formattedDate":"November 17, 2013","tags":[{"label":"cs3216","permalink":"/blog/tags/cs-3216"}],"readingTime":0.325,"hasTruncateMarker":false,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"Group Projects","slug":"group-projects","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs3216"]},"prevItem":{"title":"Open Source","permalink":"/blog/open-source"},"nextItem":{"title":"The Last Lectures","permalink":"/blog/the-last-lectures"}},"content":"The trouble with group projects:\\n\\n- Grouping with _mediocre_ teammates makes you want to do everything by yourself. You probably end up having to do so anyways and die in the process.\\n- Grouping with _godlike_ teammates encourages you to decide on a scope beyond the project and you guys die meeting the overly demanding specifications you have designed for yourself.\\n\\nGroup work is **hard**."},{"id":"the-last-lectures","metadata":{"permalink":"/blog/the-last-lectures","source":"@site/blog/2013-11-13-the-last-lectures.md","title":"The Last Lectures","description":"I love attending last lectures for some weird reason. It is usually during the last lectures when the profs share their life experiences and wisdom; stuff that cannot be obtained from lecture notes or the internet. This week, I had the honor of attending two last lectures, the modules CS3216 and CS1010S by Dr Colin Tan and Prof Ben Leong respectively. The semester has almost come to a close and it can be summarized with two modules - Yes, you guessed it, CS3216 and CS1010S. I literally neglected all other modules this semester and only did the bare minimum required for the looming deadlines. Not really a trait of a good student, but who gives? I know my limits and I do what I like.","date":"2013-11-13T00:00:00.000Z","formattedDate":"November 13, 2013","tags":[{"label":"cs3216","permalink":"/blog/tags/cs-3216"}],"readingTime":5.145,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"The Last Lectures","slug":"the-last-lectures","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs3216"]},"prevItem":{"title":"Group Projects","permalink":"/blog/group-projects"},"nextItem":{"title":"How to do Projects","permalink":"/blog/how-to-do-projects"}},"content":"I love attending last lectures for some weird reason. It is usually during the last lectures when the profs share their life experiences and wisdom; stuff that cannot be obtained from lecture notes or the internet. \x3c!--truncate--\x3eThis week, I had the honor of attending two last lectures, the modules CS3216 and CS1010S by Dr Colin Tan and Prof Ben Leong respectively. The semester has almost come to a close and it can be summarized with two modules - Yes, you guessed it, CS3216 and CS1010S. I literally neglected all other modules this semester and only did the bare minimum required for the looming deadlines. Not really a trait of a good student, but who gives? I know my limits and I do what I like.\\n\\n## CS3216\\n\\n### Talking to Users\\n\\nThis is perhaps one of the most rigorous courses in NUS. We built four (?) products within a semester. There was barely any time for breaks. Although I don\'t think I leveled up as a developer by much, I think I improved a fair bit in product and aesthetic design. We were forced by Dr Colin Tan to keep talking to our users and that\'s what we did. Whenever I met my friends in/outside school, I would get them to try my product and observed how they interacted with it. Initially, the UX of the product was pretty bad, and I ended up having to teach my friends how to use/play the product.\\n\\nBut I can\'t be around to teach every user how to use the product.\\n\\nThus we gathered feedback and refined the UX. Thanks to valuable advice from Dr Colin, Su Yuen, and our mentors from LambdaMu, Abhishek and Ivan, we finally got a clear direction and knew what to do with our product. I actually learned ethnography before in my Design Thinking classes when I was still in Mechanical Engineering. At that time, we weren\'t really building a product, just ideating, fantasizing, learning a lot of theoretical concepts and doing calculations on paper. The curriculum in Engineering was built as such, and that\'s a problem that I dislike about Engineering. But I didn\'t really talk to people then, partly because I found it hard to sell an idea without a prototype.\\n\\nCS3216 taught me the importance of user testing and validation. Although the friends that I showed the product to found it difficult to use initially, once they were taught and started playing, all I could see were smiles on their faces while they were engrossed playing the game.\\n\\n### Execution over Ideas\\n\\n> Ideas are cheap.\\n\\nI first heard this from Prof Ben when I was taking CS3217 but only truly understood it awhile later. This is evident in the many hackathons that I went to in Silicon Valley. Some teams had radical ideas but didn\'t have the ability to pull it off within 24 hours. Soedar and Joe Chee were my hackathon buddies in the valley and I\'m glad that both of them could execute ideas really fast and well. We had decent ideas, but none of them were really radical nor original. However, _we won stuff_. Ultimately, it all boils down to the execution, whether a small team of 3-4 could complete a prototype of their idea within 24 hours that sufficiently demonstrated the value. Good design helped of course, that\'s where I contributed to. Heh.\\n\\nTo be honest, my final project idea of having multiple users interacting with a large display is not a new idea. While doing my research on advertising use-cases of our product, I found at least [10 over examples of big brands using interactive billboards for advertising](http://www.trendhunter.com/slideshow/interactive-advertising-campaigns). However, I bet these brands spent a huge load on creating these advertising apps when they could have done so at a much lower cost.\\n\\nI think my team executed [Una](http://una-org.github.io/) well. A month ago, we had nothing. We were busy with midterms for the other modules that we have neglected in the first half of the semester, so we started on the final project late. But thanks to the blazing speed at which Soedar, Chun Mun and Viet Tien coded at, today, we have 3 products to showcase on STePS day. Certainly, good design and planning helped in the process.\\n\\n## CS1010S\\n\\nThoroughly enjoyed the last lecture today! As usual, Prof Ben gave a wonderful last lecture that I\'m sure inspired many of the students to work hard and possibly consider a career in CS. I talked a little about the key takeaways from CS1010S and their future directions, to one of my tutorial classes and hopefully they were inspired as well. On hindsight, I should have inserted some pictures into my **\\"Last Tutorial\\"** slides, like what Prof Ben did.\\n\\n### Learning How To Learn\\n\\nI agree with this a lot. I first encountered this when I first took CS3217. Subsequently, I felt that this skill of independent learning was so important, it is required everywhere. I had to learn independently during my NUS Overseas College internship, learn Python independently to teach CS1010S, learn how to explain programming concepts to a class of freshmen who have no prior experience in programming. Nobody will be around to force you to constantly learn and practice, but that\'s the only way to improve. Hence having an innate desire to learn is crucial.\\n\\n### Work-Life Balance\\n\\nThis is something I\'m still struggling to grasp. This semester I worked **everyday** and only went home two/three times (I stayed on campus). The crazy workload this semester was a result of underestimation on my part. Taking CS3216 and tutoring for CS1010S wasn\'t a smart move. These two modules alone are enough to make up a 20 MCs workload but on paper are actually worth only 9 MCs in total. I\'m actually glad if I have a weekend without any appointment or activities so that I can coop up in my room and do more work. But I\'m beginning to realize the importance of **people** and broadening my horizons beyond my own major. Learning can be done through interaction with others too.\\n\\nPerhaps I shall join some designer community or take up a CCA next semester. (:"},{"id":"how-to-do-projects","metadata":{"permalink":"/blog/how-to-do-projects","source":"@site/blog/2013-11-08-how-to-do-projects.md","title":"How to do Projects","description":"1. Work with the smart","date":"2013-11-08T00:00:00.000Z","formattedDate":"November 8, 2013","tags":[{"label":"cs3216","permalink":"/blog/tags/cs-3216"}],"readingTime":0.275,"hasTruncateMarker":false,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"How to do Projects","slug":"how-to-do-projects","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs3216"]},"prevItem":{"title":"The Last Lectures","permalink":"/blog/the-last-lectures"},"nextItem":{"title":"Mobile Assignment Reflections","permalink":"/blog/mobile-assignment-reflections"}},"content":"1. Work with the **smart**\\n1. Work with the **creative**\\n1. Work with the **hardworking**\\n1. Assign work according to each other\'s **strengths**\\n1. If possible, **modify** your role to make up for an aspect your team is lacking in\\n1. Pick a topic that everyone is **interested** in\\n1. Have **fun** doing the work!"},{"id":"mobile-assignment-reflections","metadata":{"permalink":"/blog/mobile-assignment-reflections","source":"@site/blog/2013-10-21-mobile-assignment-reflections.md","title":"Mobile Assignment Reflections","description":"This assignment made me worry a lot because of the little time we spent coding and testing it. I still stand by my previous rants that mobile web development is a PITA, there are simply too many nitty gritty things to consider and pitfalls to avoid when developing for mobile.","date":"2013-10-21T00:00:00.000Z","formattedDate":"October 21, 2013","tags":[{"label":"cs3216","permalink":"/blog/tags/cs-3216"}],"readingTime":3.71,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"Mobile Assignment Reflections","slug":"mobile-assignment-reflections","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs3216"]},"prevItem":{"title":"How to do Projects","permalink":"/blog/how-to-do-projects"},"nextItem":{"title":"More Thinking, Less Coding","permalink":"/blog/more-thinking-less-coding"}},"content":"This assignment made me worry a lot because of the little time we spent coding and testing it. I still stand by my previous rants that mobile web development is a PITA, there are simply too many nitty gritty things to consider and pitfalls to avoid when developing for mobile.\x3c!--truncate--\x3e\\n\\nBut surprisingly we did extremely well for this assignment! Far exceeding my expectations by just too much. Based on the feedback given from the teaching team, I\'m glad that the decisions I made when designing (both aesthetic and product) the application turned out to be the right ones:\\n\\n## Choosing a Suitable CSS Framework\\n\\nI didn\'t use Bootstrap, Foundation nor jQuery Mobile (because every other team would be using it) for the HTML and CSS. Instead, I chose to use [**UIKit**](http://www.getuikit.com/), which I chanced upon (thankfully) in a Web Designer newsletter a week before the start of Assignment 3. I chose UIKit because they had a slide-to-reveal navigation component which was prevalent in pre-iOS7 mobile apps. This helped me score quite a few points in achieving a native-like feel.\\n\\n## Flat Design\\n\\nAlmost every new UI design is flat now! Not that I really like flat design, but flat design is seriously easier to implement because I can do away with drop shadows, inner shadows, etc. I also wanted to try out developing an iOS7-like app, with heavy usage of Helvetica Neue and little use of borders.\\n\\n## Optional to Sign Up\\n\\nFor our app, Qivi, which is a mobile version of a classroom clicker, if every user needed to sign up before being able to use it, I\'m pretty sure nobody would use it. I actually learnt this from my the startup I interned over my NOC program, [**EasilyDo**](http://www.easilydo.com). The EasilyDo app does not require users to sign up before allowing them to use it, because users have to see the value in it before being willing to sign up. This was a pain to implement because users had to be given a temporary identity, but it\'s necessary to gain some users.\\n\\n## AngularJS\\n\\n[**AngularJS**](http://angularjs.org/) was perfect for this app because the app has to be backed by a RESTful service. The trouble with using RESTful APIs comes when you have to handle the updating of the view after the data has been retrieved. Those without frameworks will either append raw HTML or use jQuery to manipulate the DOM. I hate mixing my HTML and JS together because it becomes an unmaintainable mess very soon.\\n\\nAlso, AngularJS is pretty good for making Single-Page Applications, which is extremely suitable for a mobile web app that requires caching of files. Routing is done on the client side, and the number of page loads/refreshes is reduced.\\n\\nAdmittedly, I used some hackish methods to get around some issues of using UIKit and AngularJS together, but kinda unavoidable because we were under schedule constraints >\\\\_<\\n\\n## Building a Help/FAQ Page\\n\\nThis is another tip that I picked up from the EasilyDo mobile app. If your app has a certain level of complexity, it\'s not realistic to expect users to learn the app on their own. This is made even harder if the interface is confusing and does not stick to the convention of mobile apps.\\n\\nAs Su Yuen said,\\n\\n> \\"Most average laymen users however would give up within about 5-10 seconds if they open your app/website and can\'t figure out what is going on. It is especially confusing if the data you have populated in the website/app upon landing on your site is data like \'Test 123\'. \\"\\n\\nThankfully I created a sample event titled **\\"Testing Event for Qivi\\"** with detailed instructions in the \\"Help\\" page on how to understand and experience what Qivi does.\\n\\n## Keep Things Simple\\n\\nGiven the lack of time, my team had to cut features and ultimately we reduced our feature set to the core functionality of real-time response to polls. In the pitch, I repeatedly stressed the key value proposition of Qivi and guided users in experiencing it through the \\"Help\\" page.\\n\\nFocus on one thing, do it extremely well before moving on to other features.\\n\\n## Overall\\n\\nOverall, I\'m _extremely_ glad that things turned out alright and that the (coincidentally?) good UI/UX decisions made up for the lack of time in building an app that is robust against the dumbest users. I definitely learnt something valuable from this assignment and shall apply it to the final project (:"},{"id":"more-thinking-less-coding","metadata":{"permalink":"/blog/more-thinking-less-coding","source":"@site/blog/2013-10-21-more-thinking-less-coding.md","title":"More Thinking, Less Coding","description":"We are nearing the halfway mark of our final project but to be honest we haven\'t finalized on the game idea. We went on an excursion to the arcade and spent roughly 8 bucks each, trying out the games the arcade had to offer.","date":"2013-10-21T00:00:00.000Z","formattedDate":"October 21, 2013","tags":[{"label":"cs3216","permalink":"/blog/tags/cs-3216"}],"readingTime":1.725,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"More Thinking, Less Coding","slug":"more-thinking-less-coding","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs3216"]},"prevItem":{"title":"Mobile Assignment Reflections","permalink":"/blog/mobile-assignment-reflections"},"nextItem":{"title":"Team Dynamics","permalink":"/blog/team-dynamics"}},"content":"We are nearing the halfway mark of our final project but to be honest we haven\'t finalized on the game idea. We went on an excursion to the arcade and spent roughly 8 bucks each, trying out the games the arcade had to offer.\x3c!--truncate--\x3e\\n\\nHere\'s a picture of Chun Mun and Viet Tien having fun playing Bishi Bashi:\\n\\n<div align=\\"center\\">\\n\\n<img src=\\"/img/arcade.jpg\\" width=\\"400\\" />\\n\\n</div>\\n\\nInitially we wanted to emulate the game [**Gyro**](https://play.google.com/store/apps/details?id=pl.submachine.gyro&hl=en) and make a multiplayer version of it. However, after further consideration, I found it inappropriate and people would get bored easily and called for a discussion with the team.\\n\\nOur target application has to be:\\n\\n- Multiplayer (Support up to 10 concurrent players)\\n- Casual\\n- Newcomers who just joined the game should not be too disadvantaged\\n- Make use of a mobile devices\' capabilities\\n\\nThe games that came to my mind that fell into this category were multiplayer First-Person shooters such as Counter Strike and Team Fortress 2. A team-based shooting game should work for us!\\n\\nThe next decision was to decide on the theme of the game. As I am the sole designer and front end styler, we have to pick a theme that was nice, easy and fast to design. What is a front end styler? I just coined the term. It means a developer who focuses on making the interface look pretty, which in this case mostly involves writing CSS. Sadly I\'m not the only front end engineer here because Soedar, Viet Tien and Chun Mun all write better JavaScript than me. Sounds like the Project Management triangle where you pick two from \\"Fast\\", \\"Good\\" and \\"Cheap\\"? Not so much here because in design that is possible. _Good Artists Copy, Great Artists Steal_. But the best artists steal, modify, combine things, and make it their own! That\'s how the iPhone was made anyways.\\n\\nHere\'s a sneak peek at what we have for the project so far:\\n\\n![Splashscreen](/img/mockup.jpg)\\n\\nLooks pretty okay? I think so too. Let\'s see what we can come up with in the next 3 weeks. (:"},{"id":"team-dynamics","metadata":{"permalink":"/blog/team-dynamics","source":"@site/blog/2013-10-03-team-dynamics.md","title":"Team Dynamics","description":"Team dynamics has always been a sticky issue to deal with. One of my key goals of joining CS3216 was to learn how to work with talented people from different disciplines. I enjoy working with my Assignment 1 group (Chun Mun, Viet Tien and Soedarsono) a lot. There\'s nobody playing the clear role of the leader because we are all leaders in our own areas of expertise. We make important decisions together and leave each other to work on the fine details. Because of our pretty diverse skillsets, when someone faces difficulty in their work, another will be able to step in to help resolve the issue. It is awesome. (:","date":"2013-10-03T00:00:00.000Z","formattedDate":"October 3, 2013","tags":[{"label":"cs3216","permalink":"/blog/tags/cs-3216"}],"readingTime":5.525,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"Team Dynamics","slug":"team-dynamics","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs3216"]},"prevItem":{"title":"More Thinking, Less Coding","permalink":"/blog/more-thinking-less-coding"},"nextItem":{"title":"Web Development is a PITA","permalink":"/blog/web-development-is-a-pita"}},"content":"Team dynamics has always been a sticky issue to deal with. One of my key goals of joining CS3216 was to learn how to work with talented people from different disciplines.\x3c!--truncate--\x3e I enjoy working with my Assignment 1 group (Chun Mun, Viet Tien and Soedarsono) a lot. There\'s nobody playing the clear role of the leader because we are all leaders in our own areas of expertise. We make important decisions together and leave each other to work on the fine details. Because of our pretty diverse skillsets, when someone faces difficulty in their work, another will be able to step in to help resolve the issue. It is awesome. (:\\n\\nThat said, I have had horrible experiences working in teams before too. In those cases, I usually ended up solo-ing a huge part of the project because the other members were not sure of the requirements, could not deliver the work in time, or were just plain irresponsible.\\n\\nIt was really unfortunate that Uncle Jim\'s team ended up with only one coder. But I believe that could have been prevented from the start. Being in CS3216, even though it isn\'t a pure software development class, software development is still the core of a product. How can a software startup survive without a development team?! If I were Uncle Jim (a non-developer), I would have went around trying to form/land myself in a team that consisted of at least 2 coders, as soon as possible, to prevent myself from ending up in such a situation where actions could not live up to the imagination.\\n\\n### How much control and authority would you have given to this fourth voice in our choice of platform (HTML5/native iOS)?\\n\\nIf someone were nice enough to help out in somebody else\'s group out of goodwill and at the expense of their own free time, I think I would have absolute trust in him/her to make the best decisions for the group. Also, given the circumstances of the team, this fourth voice seems to be the most technologically knowledgeable person around in the team and he would be the most suitable to make the decisions. I\'m sure he would make the best decisions for the team (since he is also indirectly involved in the process) and make life easier and better for everybody. The fourth voice is also likely to choose a platform that he is strong in. A developer should be familiar with their tools because it can speed up the development process greatly especially when time is tight.\\n\\nHowever, I think it\'s only right for everyone in the team to be well-informed regarding the matter, hence I would also do my fair share of research and consult the other gurus in class to get their opinions. **Most ideas aren\'t new.** Almost every \\"new\\" idea is a rehash or combination of existing ideas. Take a look at what and how others are building/have built similar products and learn from their experiences.\\n\\n### With the deadline just 2 weeks away, how would you, as project manager, have resolved this problem if it were to occur within the team?\\n\\nHonestly, I\'m appalled that they actually thought of testing two development tracks in parallel given the amount of manpower and time they had. Are two weeks really sufficient to reach a stage of development that can reveal the critical issues and problems with each platform?\\n\\nIf I were the project manager, I would definitely be cutting features of the product. Doing one thing and doing it really well, beats multiple half-baked features that don\'t fully work. Also, I would be keeping a lookout for tools and frameworks that the team can exploit to speed up the development process. Rapid server-side solutions such as Parse and Firebase will get the back end up and running in a matter of hours. I also wouldn\'t bother with styling the application because that takes up a huge load of time, will leave it looking like the default interface. Functionality > Looking pretty when there\'s no time.\\n\\n### What are some of the issues that we presented that could have happened to any team? List down 3, and talk about how you would have resolved these issues.\\n\\n#### 1. Conflicts\\n\\nThis happens in **every** team. It is only _normal_ to disagree, it only goes to show that the members are opinionated and are concerned with the project. However, the team should not spend too long arguing it out. Internal voting can be done as soon as possible to arrive at a general consensus so that the team can progress. Also, everyone should try to convince each other and be convinced by the decision made so that there are no hard feelings and the harmony of the group can be preserved.\\n\\nWe are all human. Hence sometimes we let our emotions get the better of us and we vent our frustrations at our team members. As a team, we\'re all in this together. People bond through shared suffering and this is just another instance of the painful process. Try to tolerate with each other and trash things out as early as possible, before misunderstandings escalate into serious conflicts.\\n\\n#### 2. Unrealistic Estimations\\n\\nIn the book [Rework](http://37signals.com/rework) by Jason Fried, Founder of 37 Signals, he mentions that most teams have unrealistic project timelines and that most peoples\' estimation sucks. We tend to be overly optimistic about our own (and possibly team members\') abilities and propose a very ideal timeline for the project. This does not work out most of the time due to the unforeseen circumstances. I would suggest a milestone-based approach where the team tries to attain that milestone together and helping out any member that falls behind. A team is only as fast as their slowest member.\\n\\n#### 3. Mismatch of Skillsets\\n\\nSince the team members are set in stone (kinda), the team should change what can be changed: their project focus. If there is only one coder present, then the project should probably be something less technically challenging and have a heavier emphasis on the UI/UX and content.\\n\\nA very good example of a CS3216 project that isn\'t super technically challenging to build, but manages to impress people would be [Letters to Amanda](http://www.letterstoamanda.com). They have a clear value proposition and handles it extremely well.\\n\\n### Final Words\\n\\nNow I appreciate why we were made to read Rework and Mythical Man-Month back in CS3217. In some cases, good project management skills can be more important than the technical aptitude of the developers.\\n\\nWill be starting on my final project this weekend. Apprehensive but excited at the possibilities. (:"},{"id":"web-development-is-a-pita","metadata":{"permalink":"/blog/web-development-is-a-pita","source":"@site/blog/2013-09-24-web-development-is-a-pita.md","title":"Web Development is a PITA","description":"This is a rage post because of all the frustration I faced while doing Assignment 3 and mobile web in general.","date":"2013-09-24T00:00:00.000Z","formattedDate":"September 24, 2013","tags":[{"label":"cs3216","permalink":"/blog/tags/cs-3216"}],"readingTime":2.24,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"Web Development is a PITA","slug":"web-development-is-a-pita","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs3216"]},"prevItem":{"title":"Team Dynamics","permalink":"/blog/team-dynamics"},"nextItem":{"title":"The Calm Before the Storm","permalink":"/blog/the-calm-before-the-storm"}},"content":"This is a rage post because of all the frustration I faced while doing Assignment 3 and mobile web in general.\\n\\n\x3c!--truncate--\x3e\\n\\nActually, I quite enjoy web development because HTML and CSS is intuitive and extensible. But what I severely dislike about web development is the fragmentation of browsers, viewport sizes and devices! This is especially a PITA (pain in the arse) when it comes to mobile web development. There are like 3456723139738 different dimensions of mobile device screens. It\'s certainly not fun ensuring that your mobile site looks good on every available mobile device. Have decided to just build one that works for iPhone 4S/5/5S/5C. Apple FTW. One can go crazy if one tries to support every Android device.\\n\\nEnough with the angst. Over the past few months, through my attempts at solving the various common problems I faced while doing mobile web developing, I came to realize some recommended practices that should be adopted to make the painful process less painful.\\n\\n### Use HTML5 Boilerplate\\n\\nSo you think you know cross-browser compatibility? You won\'t know it better than [HTML5 boilerplate](http://html5boilerplate.com/), which provides a template as a starting point for any website. It tries to standardize the CSS across different browsers with [Normalize.css](http://necolas.github.com/normalize.css/) and comes with jQuery and [Modernizr](http://modernizr.com/). For the mobile assignment, I used [HTML5 Boilerplate Mobile](http://html5boilerplate.com/mobile/) which is a starting template for mobile web development.\\n\\n### Avoid jQuery Animations, use CSS3 Transitions\\n\\nMany developers are more familiar with jQuery animations because it is easier to use (they hate touching the CSS file). However, jQuery animations are **really bad** performance-wise on mobile devices. A full blog post on this can be found [here](http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/). The main reason for this is that CSS3 transitions are hardware accelerated.\\n\\n### Interactive Elements Should be Large Enough\\n\\nThis is a common pitfall for developers who test their mobile site on the computer. It is not immediately obvious that the experience of navigating the site on a mobile device with your fingers is vastly different from clicking with a mouse. If your links and buttons are too small, users will have a tough time tapping on them on their mobile devices. An average user\'s finger size is 40px x 40px. Don\'t clutter up multiple small buttons together unless you want users to curse and swear because they tapped wrongly. Leave spacing between buttons if your buttons _have_ to be small for some weird reason.\\n\\n### Font Awesome\\n\\nMy favorite asset will be these pretty icons from [Font Awesome](http://fortawesome.github.io/Font-Awesome/icons/) that are actually SVGs (Scalable Vector Graphics). With this, no longer is there a need for icon spritesheets that aren\'t exactly flexible and retina-friendly. EVERYONE SHOULD USE THIS!\\n\\nOkay, back to my Assignment 3."},{"id":"the-calm-before-the-storm","metadata":{"permalink":"/blog/the-calm-before-the-storm","source":"@site/blog/2013-09-09-the-calm-before-the-storm.md","title":"The Calm Before the Storm","description":"Last assignment for CS3216! The past 4 weeks have been hell for me. My senior, Jonathan Low, ex-CVWO president and guest speaker for the past few batches of CS3216 and CS3217, after hearing that I\'ll be head tutoring CS1010S and CS3216 on top of the standard academic workload in this sem, gave me a really encouraging word of advice: \\"You will die man.\\"","date":"2013-09-09T00:00:00.000Z","formattedDate":"September 9, 2013","tags":[{"label":"cs3216","permalink":"/blog/tags/cs-3216"}],"readingTime":2.24,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"The Calm Before the Storm","slug":"the-calm-before-the-storm","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs3216"]},"prevItem":{"title":"Web Development is a PITA","permalink":"/blog/web-development-is-a-pita"},"nextItem":{"title":"Facebook/iPad Application Seminar - Maps","permalink":"/blog/facebook-ipad-application-seminar-maps"}},"content":"Last assignment for CS3216! The past 4 weeks have been hell for me. My senior, [Jonathan Low](https://www.linkedin.com/in/jonathanlowhy/), ex-CVWO president and guest speaker for the past few batches of CS3216 and CS3217, after hearing that I\'ll be head tutoring CS1010S and CS3216 on top of the standard academic workload in this sem, gave me a _really encouraging_ word of advice: \\"You will die man.\\"\\n\\n\x3c!--truncate--\x3e\\n\\nFor the past 4 weeks I have been sleeping at 5-6 am every other day and waking up just in time before the tutorials which I have no clue about what the tutor is teaching simply because I haven\'t been spending time on them. Everyday was like check to-do list, do work, clear backlog, rinse, repeat.\\n\\nFinally I get a breather! In this e-learning week, we\'re all supposed to do our own e-learning. Some professors have nicely left us with annotated versions of their lecture notes and honestly I prefer that over attending physical lectures. Always a fan of independent learning! I\'m going to use this week to catch up on all other modules that I have been lagging in, and also help my CS1010S students in learning order of growth. Many of them are unable to grasp the concepts of time and space complexity and I don\'t blame them. 4 weeks into programming and they have to learn something most others would not learn in an introductory programming course?\\n\\nI\'m honestly quite worried for my CS3216 Assignment 3. Will be working with a bunch of new individuals this time round and I\'m unfamiliar with their working style. Doesn\'t help that we\'re only given 3 weeks to complete it. Again, I\'m the only front end person in the team but thankfully I have dabbled in mobile web development shit before and know the pitfalls to avoid. But still, it\'s not fun to work on mobile web related stuff. Not only does the developer have to worry about cross-browser and cross-platform issues, there\'s also cross-devices (different viewport size and specs) to handle?! Sounds like a load of trouble to me.\\n\\nWas thinking of ideas for assignment 3 and I\'m pretty sure I won\'t want the app to be a platform this time. Almost all assignment 1 projects were platforms, will assignment 3 be similar? Given the short span of time available, I\'m not confident of pulling off a mobile web platform well. Initially wanted to do a game but since building native applications is no longer allowed, games are not too viable an option. Hence I\'m thinking of creating something nimble but useful, something along the lines of a utility application.\\n\\nWeather app? To-do list app? Calendar app? Perhaps a gamified twist to them. (:"},{"id":"facebook-ipad-application-seminar-maps","metadata":{"permalink":"/blog/facebook-ipad-application-seminar-maps","source":"@site/blog/2013-09-02-facebook-ipad-application-seminar-maps.md","title":"Facebook/iPad Application Seminar - Maps","description":"Ahh the Apple Maps app. What an uproar it caused when it was first released. Like many iPhone users, I don\'t use the Apple Maps app; I use the Google Maps app instead, simply because it syncs with the location queries that I make in my MacBook\'s Chrome browser. The Google Maps app has amazing user experience compared to Apple\'s version. Makes me wonder if Apple even tested their app with real users before putting it in every iPhone that runs iOS 6 and above.","date":"2013-09-02T00:00:00.000Z","formattedDate":"September 2, 2013","tags":[{"label":"cs3216","permalink":"/blog/tags/cs-3216"},{"label":"facebook","permalink":"/blog/tags/facebook"}],"readingTime":4.005,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"Facebook/iPad Application Seminar - Maps","slug":"facebook-ipad-application-seminar-maps","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs3216","facebook"]},"prevItem":{"title":"The Calm Before the Storm","permalink":"/blog/the-calm-before-the-storm"},"nextItem":{"title":"Growth Hacking","permalink":"/blog/growth-hacking"}},"content":"Ahh the Apple Maps app. What an uproar it caused when it was first released. Like many iPhone users, I don\'t use the Apple Maps app; I use the Google Maps app instead, simply because it syncs with the location queries that I make in my MacBook\'s Chrome browser. The Google Maps app has amazing user experience compared to Apple\'s version. Makes me wonder if Apple even tested their app with real users before putting it in every iPhone that runs iOS 6 and above.\\n\\n\x3c!--truncate--\x3e\\n\\n##### Huge Consequences\\n\\nI cannot agree more with Benjamin on this point. Utility applications are **so damn important** in our lives now. I can\'t imagine a day where Google Search, Google Docs and Google Calendar breaks down; I\'ll be at a total loss as I rely on them so much to navigate my day. Map apps are especially important because that is the single source of dependence that a person relies on to navigate his journey. As the saying goes, _With great power, comes great responsibility_. If tens of millions of users rely on a service each day, it jolly well function correctly all the time or else the disruption will affect the lives of many people. It was mentioned that inaccuracy of the maps can cause potential danger hazards. This is especially true if people trust the map app completely and follow its turn-by-turn instructions. Drivers can get over-focused on following instructions from the app and lose track of the surroundings. It would be disastrous if the map app wrongly directs the driver to turn into a street of the opposite direction! It may be far too late before the driver realizes the mistake.\\n\\nSome examples of the wonderful things Apple Maps was showing when they first launched: [http://theamazingios6maps.tumblr.com/](http://theamazingios6maps.tumblr.com/)\\n\\n##### Lousy UX\\n\\nHow can a map app not have public transport and cycling routes? It is only in the US that most people own a car. In Asian countries, public transport and cycling is still the dominant mode of transportation. Also, the app does not provide detailed lane guidance, which shows you which lane to be in as much as a mile before your turn and gets you set up to make your turn. Having drove in California to close to a year, this feature is extremely important when I am travelling to new places because I am unfamiliar with the roads. Speed limits on the road are high and there is little time to set myself up before a turn. This issues scream a lack of usability and goes to show how much thought and user testing Apple has put into the design and development of the application... perhaps none.\\n\\n##### Crowdsourcing Traffic Data\\n\\nCrowdsourcing is the new buzzword now. It is the act of seeking contributions from the masses, usually an online community. Crowdsourcing is increasingly relevant now because almost everyone possesses a smartphone. This makes everyone connected by the internet. The power of the masses can be harnessed if everyone shares information regarding their current location. This would make an extremely updated real-time traffic situation that benefits everybody. It\'s a win-win situation and everybody can benefit from a small gesture of sharing a little information. However, put in the context of the application, it is dangerous to be sharing traffic information when one is driving. However, this can be solved by modifying the UI/UX so make the sharing of real-time information be safe and accurate.\\n\\n#### Original Thoughts\\n\\nFew months back, I happened to switch back to using my iPhone 4S to navigate. I was driving along the roads of Mountain View, and I found the maps app extremely hard to use; the interface looked familiar, but the gestures were unintuitive, flow of the application didn\'t make much sense to me too. Then it dawned upon me: I was using Apple\'s new Map app. It was my first time using iOS 6 on my iPhone and I forgot that the default maps app in the device was no longer by Google. Wasting no time, I went to the App Store and downloaded Google\'s version of the maps app and continued on my journey.\\n\\nIt is appalling that Apple, a guru of UI/UX, produced a Maps app of such quality; the initial version of Apple\'s Map app seems horrible, but it was improved tremendously in the past year, by finetuning based on user feedback and also acquisition of navigation related startups and technology. The iOS 7 redesign unveiled during WWDC this year also faced the same fate of being flamed and slammed. Perhaps Apple is adopting the [Lean Startup Methodology](http://theleanstartup.com/) and iteratively building products and services. But I\'d expect more from Apple if they want to regain their market share of handheld devices. Apple certainly has got much more to improve on."},{"id":"growth-hacking","metadata":{"permalink":"/blog/growth-hacking","source":"@site/blog/2013-09-01-growth-hacking.md","title":"Growth Hacking","description":"The topic of growth hacking has always intrigued me. Coming from an engineering background, I was never exposed to the non-technical aspects of a product. Although my NOC stints allowed me to work with the marketing and business development team, I wasn\'t involved in the decision-making process and marketing strategies.","date":"2013-09-01T00:00:00.000Z","formattedDate":"September 1, 2013","tags":[{"label":"cs3216","permalink":"/blog/tags/cs-3216"}],"readingTime":1.29,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"Growth Hacking","slug":"growth-hacking","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs3216"]},"prevItem":{"title":"Facebook/iPad Application Seminar - Maps","permalink":"/blog/facebook-ipad-application-seminar-maps"},"nextItem":{"title":"Learning How to Learn","permalink":"/blog/learning-how-to-learn"}},"content":"The topic of growth hacking has always intrigued me. Coming from an engineering background, I was never exposed to the non-technical aspects of a product. Although my NOC stints allowed me to work with the marketing and business development team, I wasn\'t involved in the decision-making process and marketing strategies.\x3c!--truncate--\x3e\\n\\nI was thoroughly impressed by [Bjorn Lee\'s](https://www.linkedin.com/in/bjornlee/) presentation. Anyone could tell he was an experienced growth hacker from the techniques that he shared. I especially agree with him that \\"Build and they will come\\" is a bloody damned myth. In the creation process of an app, it\'s also important to consider the various marketing channels and viral techniques that will be put into the app. An app without a solid plan of how it is going to market itself, is unlikely to be heard of by many after it is being built.\\n\\nFor my CS3216 Facebook assignment, Osmose, I\'m proud to say that we already have a pool of beta testers: our students from CS1010S and in future, the NUS population. However, I\'m not very confident of growth hacking Osmose to reach out to the rest of NUS. **Corspedia** had it easy because we had help from **NUSMods**, built by Beng Hee also from this class of CS3216. **NUSMods** is truly one of the best NUS-based projects I have seen so far - great UI and UX, it was a joy to use. Looks like we\'ll have to come up with good strategies before embarking on our final project, which aims to bring Osmose to a new level."},{"id":"learning-how-to-learn","metadata":{"permalink":"/blog/learning-how-to-learn","source":"@site/blog/2013-08-25-learning-how-to-learn.md","title":"Learning How to Learn","description":"My team has decided to use Sails.js for the first assignment. It is an MVC framework for Node.js that is pretty much like rails. It\'s time to learn a new framework/library again! And sadly, because it\'s a new framework, there isn\'t much documentation and tutorials for me to refer to. I learn best through doing and experimenting. As the saying goes: I see and I understand, I do and I remember. Getting my hands dirty and trying things out for myself is an important phase of learning something new.","date":"2013-08-25T00:00:00.000Z","formattedDate":"August 25, 2013","tags":[{"label":"cs3216","permalink":"/blog/tags/cs-3216"}],"readingTime":1.72,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"Learning How to Learn","slug":"learning-how-to-learn","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs3216"]},"prevItem":{"title":"Growth Hacking","permalink":"/blog/growth-hacking"},"nextItem":{"title":"What I Want to Build in CS3216","permalink":"/blog/what-i-want-to-build-in-cs3216"}},"content":"My team has decided to use [Sails.js](http://sailsjs.org/#!) for the first assignment. It is an MVC framework for Node.js that is pretty much like rails. It\'s time to learn a new framework/library again! And sadly, because it\'s a new framework, there isn\'t much documentation and tutorials for me to refer to. I learn best through doing and experimenting. As the saying goes: _I see and I understand, I do and I remember_. Getting my hands dirty and trying things out for myself is an important phase of learning something new.\x3c!--truncate--\x3e\\n\\nBeing involved in the rapidly evolving field of technology, one has to constantly upgrade oneself. Hence I think the most important skill is to learn how to learn anything, fast and well. I\'m thankful that I teamed up with a strong team for the first assignment - Soedarsono, Viet Tien and Soon Chun Mun. They are extremely fast learners and talented programmers. We actually do a lot of pair programming and meet up very often to work on our Facebook app together. I have learnt quite a bit from them and hopefully they get to learn something from me too.\\n\\nTutorials start this week and it shall be my first time tutoring a class of CS1010S freshies. Prof Ben is an inspiration to many of his students and I also strive to be an inspiration to my student and spark their interest in Computer Science. In an email thread among the CS1010S tutors, we were discussing about our teaching approaches and about the neediness of the students; they were emailing Prof Ben and asking for help in debugging. I find it amusing because I personally have not done that before and this behavior is never seen in higher level modules. The goal of CS1010S is to rewire the students\' brains to think computationally. A higher level goal will be to teach the students how to learn on their own, to Google their question whenever they meet a problem instead of relying on someone for an answer. It is hard to achieve that, but extremely important."},{"id":"what-i-want-to-build-in-cs3216","metadata":{"permalink":"/blog/what-i-want-to-build-in-cs3216","source":"@site/blog/2013-08-18-what-i-want-to-build-in-cs3216.md","title":"What I Want to Build in CS3216","description":"\\"What exactly do I want to build in CS3216?\\". This question has been bugging me for the entire summer and I still do not have an answer to this question. Initially, I wanted to build a multiplayer game that uses WebRTC because it has been really hot after Google demonstrated prototypes of their WebRTC games during Google I/O, such as Chrome Maze, Cube Slam and Racer. Most people will shy away from building games simply because it\'s tough to produce the assets for the game. However, with a background in design, and because I have experience in building an iPad game Tenza Yakitori as the final project of CS3217, I felt that I could build a game for a project and it will still turn out decent. Also, I was getting bored of building CRUD (Create, Read, Update, Delete) apps; game logic was definitely more fun to code.","date":"2013-08-18T00:00:00.000Z","formattedDate":"August 18, 2013","tags":[{"label":"cs3216","permalink":"/blog/tags/cs-3216"}],"readingTime":1.875,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"What I Want to Build in CS3216","slug":"what-i-want-to-build-in-cs3216","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs3216"]},"prevItem":{"title":"Learning How to Learn","permalink":"/blog/learning-how-to-learn"},"nextItem":{"title":"What I hope to learn in CS3216","permalink":"/blog/what-i-hope-to-learn-in-cs3216"}},"content":"\\"What exactly do I want to build in CS3216?\\". This question has been bugging me for the entire summer and I still do not have an answer to this question. Initially, I wanted to build a multiplayer game that uses WebRTC because it has been really hot after Google demonstrated prototypes of their WebRTC games during Google I/O, such as [Chrome Maze](http://chrome.com/maze/), [Cube Slam](https://www.cubeslam.com/) and [Racer](http://www.chrome.com/racer). \x3c!--truncate--\x3eMost people will shy away from building games simply because it\'s tough to produce the assets for the game. However, with a background in design, and because I have experience in building an iPad game [Tenza Yakitori](http://www.youtube.com/watch?v=wI-4l_FhHsk) as the final project of CS3217, I felt that I could build a game for a project and it will still turn out decent. Also, I was getting bored of building CRUD (Create, Read, Update, Delete) apps; game logic was definitely more fun to code.\\n\\nHowever, launching Corspedia in the last month made me rethink my decision of building a game in CS3216. A few friends have came to tell me that it was super useful and were glad that I solved a pain point in their bidding process. I\'m not entirely sure if I will get such feedback or even be able to reach out to that many users if I built a game instead. I like the feeling of having users use a product I have built. (:\\n\\nGames aren\'t all that tough to build. But making it fun and incorporating fun elements into it, is extremely tough. Games are there to provide entertainment, not so much to solve a pain point (unless you consider stress as one). Once a user gets bored of the game, it loses its value entirely. Also, I don\'t have the confidence to build an addictive and fun game especially when I get bored of the own game that I built.\\n\\nTherefore, I\'m looking at building something useful. It may not be fun, but will definitely improve the lives of its users. NUS Computing students have built better timetable builders, better IVLE experiences and improved many other NUS-related services. Hence, for the first assignment (and possibly the final project), my team and I shall make an attempt at improving a school-related service: A better forum."},{"id":"what-i-hope-to-learn-in-cs3216","metadata":{"permalink":"/blog/what-i-hope-to-learn-in-cs3216","source":"@site/blog/2013-08-11-what-i-hope-to-learn-in-cs3216.md","title":"What I hope to learn in CS3216","description":"Having taken CS3217 before, I understand that CS3216 is unlike most CS modules, the learning curve is extremely steep and students are expected to turn from zero to hero in a span of few weeks. CS3217 caught me off guard; I literally spent every single day coding and learning Objective-C, severely losing sleep, hair and my sanity.","date":"2013-08-11T00:00:00.000Z","formattedDate":"August 11, 2013","tags":[{"label":"cs3216","permalink":"/blog/tags/cs-3216"}],"readingTime":4.755,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png"}],"frontMatter":{"title":"What I hope to learn in CS3216","slug":"what-i-hope-to-learn-in-cs3216","author":"Yangshun Tay","author_url":"https://github.com/yangshun","author_image_url":"https://github.com/yangshun.png","tags":["cs3216"]},"prevItem":{"title":"What I Want to Build in CS3216","permalink":"/blog/what-i-want-to-build-in-cs3216"}},"content":"Having taken CS3217 before, I understand that CS3216 is unlike most CS modules, the learning curve is extremely steep and students are expected to turn from zero to hero in a span of few weeks. CS3217 caught me off guard; I literally spent every single day coding and learning Objective-C, severely losing sleep, hair and my sanity.\\n\\n\x3c!--truncate--\x3e\\n\\nI know many CS3216 alumni and heard their experiences about the module and the hard times they have gone through. Why do people put themselves through so much suffering and hardship when there are easier alternatives around? It is because stretching myself to our limits is the fastest way to level up. We all are equal in the sense that everybody has an equal amount of a limited resource - time. Hence we have to optimize our time and spend it in a way that we enjoy and also gain the most out of. For me, I believe that coding is the right field for me where it is the sweet intersection of something I enjoy doing, can make a living out of, and am good at.\\n\\n#### Wearing Multiple Hats\\n\\nI spent a year interning at a startup in Silicon Valley doing iOS and front end web development. Ironically, many of the skills that required for me to succeed in my internship were not taught in school. We were not taught to maintain development and production environments; neither were we taught to work with coworkers from other departments. These are also skills beyond school context that are valued in the industry, hence it is important that we learn them. CS3216 is special in the sense that it accepts students from all faculties as long as they have the relevant interests. I launched Corspedia together with a friend, Weiqing Toh, in late July. Corspedia is a search engine for CORS bidding history and takes the pain out of navigating the horrendous CORS bidding archives interface. It was popular among NUS students and we had 1000+ active visitors each day. For Corspedia, I was the designer and front end developer. Both me and my partner participated in the product design were actively discussing what features to add for the next release at the end of the year. I believe an important criteria to succeed is to learn to be versatile and take up many roles. I\'m here to learn to wear multiple hats and get my hands dirty on things beyond coding. I would also like to participate heavily in product design, product direction and project management.\\n\\n**_Update 2021: Corspedia\'s bidding stats have been integrated into NUSMods\' module page as a first-class feature._**\\n\\n#### Working With People\\n\\nI\'m not new to web development. It\'s weird but I enjoy writing HTML and Markdown syntax. I get a sense of satisfaction from seeing markup being transformed into rendered layouts and elements. It is also awesome to be able to create useful softwares that reaches the hands of people right from my personal laptop. But software is rarely the work of a single person. I enjoy working in small teams with trusted programmer friends to hack out something cool together. I used to enjoy hackathons, participating in almost every that I could while I was in Silicon Valley. I have grown to realize that my time was better spent working on longer-term side-projects, rather than small hackathon projects which would end up abandoned after the hackathon event. We are forced to work with different people for the various CS3216 assignments, and this will train me to adapt to different working styles.\\n\\n#### Leveling Up (Fast)\\n\\nTechnically speaking, I\'m a Year 4 in SoC but the truth is that I have only completed 5 CS modules so far. That is because I started university majoring in Mechnical Engineering but I grew to love programming after taking a compulsory introduction to programming course in my first year (CS1010E). I found myself spending more time on coding than my mechanical engineering modules. I didn\'t really understand what I was studying in ME and I was familiarizing myself with question patterns rather than understanding the concepts in order to clear the exams. In the end, I took a gamble and applied to switch courses after Year 2 Sem 1. My results were decent enough and I had a recommendation from Dr Ang Chuan Heng whom I worked for while serving as a Teaching Assistant for CS1020E. In the end, I could switch course and even keep my NUS Faculty Scholarship. It was too good to be true. I haven\'t enjoyed school so much in my life before.\\n\\nBut this also means that I was behind many of my peers. I have to work doubly hard in order to make up for the lost time. As warm up for CS3216, I coded this static site blogging engine using AngularJS, called [**Luna**](https://github.com/yangshun/luna). I\'m a front end guy, I dislike using command line interfaces and dealing with databases, hence I was fascinated by static site templating engines. I was inspired by [**Jekyll**](http://jekyllrb.com/) and [**Empress**](https://github.com/hodgesmr/Empress), which are static site engines that generate HTML pages from markdown files. Luna is more flexible to use compared to Blogger and Wordpress (mainly because I built it) as I only have to write the blog content in markdown and run a python script to generate the content in JSON. I also happen to like to customise my own sites and I quite enjoy using this so far! (:\\n\\n**_Update 2021: I\'ve migrated this blog to Docusaurus, which is also a static site generator built by me._**\\n\\nI will probably not get another chance to improve rapidly in web development in school if I don\'t take CS3216. So why not?"}]}')}}]);